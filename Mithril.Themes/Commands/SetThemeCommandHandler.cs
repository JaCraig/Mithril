using Microsoft.Extensions.Logging;
using Microsoft.FeatureManagement;
using Mithril.API.Abstractions.Attributes;
using Mithril.API.Abstractions.Commands;
using Mithril.API.Abstractions.Commands.BaseClasses;
using Mithril.API.Abstractions.Commands.Interfaces;
using Mithril.Data.Abstractions.Services;
using Mithril.Themes.Abstractions.Interfaces;
using Mithril.Themes.Abstractions.Services;
using Mithril.Themes.Commands.ViewModels;
using Mithril.Themes.Models;
using System.Security.Claims;

namespace Mithril.Themes.Commands
{
    /// <summary>
    /// Set theme command handler
    /// </summary>
    /// <seealso cref="CommandHandlerBaseClass&lt;SetThemeCommand, SetThemeCommandVM&gt;"/>
    [ApiIgnore]
    public class SetThemeCommandHandler : CommandHandlerBaseClass<SetThemeCommand, SetThemeCommandVM>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetThemeCommandHandler"/> class.
        /// </summary>
        /// <param name="logger">The logger.</param>
        /// <param name="featureManager">The feature manager.</param>
        /// <param name="dataService">Data service.</param>
        /// <param name="themeService">Theme service.</param>
        /// <param name="themes">Themes in the system.</param>
        public SetThemeCommandHandler(
            ILogger<SetThemeCommandHandler>? logger,
            IFeatureManager? featureManager,
            IDataService? dataService,
            IThemeService? themeService,
            IEnumerable<ITheme> themes)
            : base(logger, featureManager)
        {
            ThemeService = themeService;
            DataService = dataService;
            Themes = (themes ?? Array.Empty<ITheme>()).ToDictionary(x => x.Name);
        }

        /// <summary>
        /// Gets the command type accepted.
        /// </summary>
        /// <value>The command type accepted.</value>
        public override string CommandName => "SetTheme";

        /// <summary>
        /// Gets the tags (Used by OpenAPI, etc).
        /// </summary>
        /// <value>The tags (Used by OpenAPI, etc).</value>
        public override string[] Tags => new[] { "Theme" };

        /// <summary>
        /// Gets the data service.
        /// </summary>
        /// <value>The data service.</value>
        private IDataService? DataService { get; }

        /// <summary>
        /// Themes available.
        /// </summary>
        private IDictionary<string, ITheme> Themes { get; }

        /// <summary>
        /// Theme service
        /// </summary>
        /// <value>Theme service</value>
        private IThemeService? ThemeService { get; }

        /// <summary>
        /// Creates the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="user">The user.</param>
        /// <returns>A command value converted from the ExpandoObject.</returns>
        public override ValueTask<CommandCreationResult?> CreateAsync(SetThemeCommandVM? value, ClaimsPrincipal user)
        {
            return ValueTask.FromResult(IsFeatureEnabled() && !string.IsNullOrEmpty(value?.Name) ?
                new CommandCreationResult(new SetThemeCommand(value.Name), ResultText: $"Theme successfully changed to {value.Name}.")
                : null);
        }

        /// <summary>
        /// Handles the command.
        /// </summary>
        /// <param name="args">The arguments.</param>
        /// <returns>The events generated by the command.</returns>
        protected override async Task<IEvent[]> HandleCommandAsync(SetThemeCommand?[]? args)
        {
            if (args is null || Logger is null || ThemeService is null)
                return Array.Empty<IEvent>();
            List<IEvent> ReturnValues = new List<IEvent>();
            for (var x = 0; x < args.Length; ++x)
            {
                var arg = args[x];
                if (arg is null || string.IsNullOrEmpty(arg.ThemeName))
                    continue;
                if (!Themes.TryGetValue(arg.ThemeName, out var theme) || theme is null)
                    continue;
                var CurrentDefaultTheme = ThemeService.LoadTheme();
                var CurrentDefaultThemeModel = Theme.Load(CurrentDefaultTheme?.Name ?? "Default", DataService);
                var TempTheme = Theme.Load(theme.Name, DataService);
                if (TempTheme is null)
                    continue;
                if (CurrentDefaultThemeModel is not null)
                    CurrentDefaultThemeModel.IsDefault = false;
                TempTheme.IsDefault = true;
                await (DataService?.SaveAsync(null, TempTheme, CurrentDefaultThemeModel) ?? Task.CompletedTask).ConfigureAwait(false);

                ReturnValues.Add(new ThemeChangedEvent(arg.ThemeName));
            }
            return ReturnValues.ToArray();
        }
    }
}
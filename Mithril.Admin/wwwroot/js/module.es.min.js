var _ = Object.defineProperty;
var $ = (t, e, n) => e in t ? _(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var g = (t, e, n) => ($(t, typeof e != "symbol" ? e + "" : e, n), n);
import p, { openBlock as h, createElementBlock as l, createTextVNode as f, createElementVNode as u, toDisplayString as D, pushScopeId as S, popScopeId as N, Fragment as A, renderList as E, createBlock as k, resolveDynamicComponent as C, resolveDirective as B, withDirectives as F, withModifiers as T, normalizeClass as w } from "vue";
import K from "moment";
const V = p.defineComponent({
  name: "settings-editor-component"
}), m = (t, e) => {
  const n = t.__vccOpts || t;
  for (const [s, r] of e)
    n[s] = r;
  return n;
};
function j(t, e, n, s, r, o) {
  return h(), l("div", null, "Settings Editor");
}
const L = /* @__PURE__ */ m(V, [["render", j]]), M = p.defineComponent({
  name: "entity-editor-component"
});
function q(t, e, n, s, r, o) {
  return h(), l("div", null, "Entity Editor");
}
const z = /* @__PURE__ */ m(M, [["render", q]]);
class v {
  // constructor
  constructor(e, n, s) {
    this.DBName = e, this.Version = s;
    let r = indexedDB.open(e, s);
    r.onupgradeneeded = (o) => {
      this.database = o.target.result;
      for (let a = 0; a < n.length; ++a) {
        let c = n[a];
        this.database.objectStoreNames.contains(c) && this.database.deleteObjectStore(c), this.database.createObjectStore(c);
      }
    }, r.onsuccess = (o) => {
      this.database = o.target.result;
    };
  }
  // open the database table
  openDatabase(e) {
    let n = indexedDB.open(this.DBName, this.Version);
    n.onsuccess = (s) => (this.database = s.target.result, e(this));
  }
  add(e, n, s) {
    this.database.transaction(e, "readwrite").objectStore(e).put(n, s);
  }
  remove(e, n) {
    this.database.transaction(e, "readwrite").objectStore(e).delete(n);
  }
  getByKey(e, n, s) {
    let r = this.database.transaction(e, "readwrite").objectStore(e).get(n);
    r.onsuccess = s;
  }
  getKeys(e, n) {
    let s = this.database.transaction(e, "readwrite").objectStore(e).getAllKeys();
    s.onsuccess = n;
  }
  get(e, n, s) {
    let r = this.database.transaction(e, "readwrite").objectStore(e).get(n);
    r.onsuccess = s;
  }
  getAll(e, n, s) {
    let r = this.database.transaction(e, "readwrite").objectStore(e).getAll(s);
    r.onsuccess = n;
  }
}
class i {
  // Constructor
  constructor(e, n, s) {
    this.url = n, this.method = e.toUpperCase(), this.data = s, this.headers = new Headers(), this.method !== "GET" && this.method !== "HEAD" && this.method !== "DELETE" && this.method !== "TRACE" && this.type("application/json"), this.accept("application/json"), this.parser = (r) => r.json(), this.serializer = (r) => JSON.stringify(r), this.storageMode = 2, this.databaseName = "MithrilStorage", this.cacheKey = this.url + this.serializer(this.data), this.credentials = "same-origin";
  }
  // GET method.
  static get(e, n) {
    return i.makeRequest("GET", e, n);
  }
  // A request using a HTTP verb that is not GET, POST, PUT, or DELETE
  static makeRequest(e, n, s) {
    return new i(e, n, s);
  }
  // POST method.
  static post(e, n) {
    return i.makeRequest("POST", e, n);
  }
  // PUT method.
  static put(e, n) {
    return i.makeRequest("PUT", e, n);
  }
  // DELETE method.
  static delete(e, n) {
    return i.makeRequest("DELETE", e, n);
  }
  // Adds a callback to call if the AJAX request succeeds.
  onSuccess(e) {
    return this.success = e, this;
  }
  // Adds a callback to call if the AJAX request fails.
  onError(e) {
    return this.error = e, this;
  }
  // Adds a header value to the AJAX request.
  setHeader(e, n) {
    return this.headers.set(e, n), this;
  }
  // Sets the cache key
  setCacheKey(e) {
    return this.cacheKey = e, this;
  }
  // Sets the credentials type used for the call
  setCredentials(e) {
    return this.credentials = e, this;
  }
  // Short hand for setting the content type header value
  type(e) {
    return this.setHeader("Content-Type", e);
  }
  // Short hand for setting the accepts header value
  accept(e) {
    return this.setHeader("Accept", e);
  }
  // Sets the parser that the request uses
  setParser(e) {
    return this.parser = e, this;
  }
  // Ensures that the result of the request will be cached and used in future requests.
  setMode(e, n = "MithrilStorage") {
    return this.databaseName = n, this.storageMode = e, this;
  }
  // Sets the serializer that the request uses
  setSerializer(e) {
    return this.serializer = e, this;
  }
  // Actually sends the request, parses it, and calls either the
  // success or error functions if they exist.
  send() {
    (this.error === void 0 || this.error === null) && (this.error = (n) => {
    }), (this.success === void 0 || this.success === null) && (this.success = (n) => {
    });
    let e = this.serializer(this.data);
    if (this.storageMode === 1) {
      i.returnValueFromDB(this.cacheKey, this.databaseName, this.success), this.queryNetwork(e, this.cacheKey, this.databaseName, (n) => {
      }, (n) => {
        i.saveValueToDB(n, this.cacheKey, this.databaseName);
      });
      return;
    }
    if (this.storageMode === 3) {
      i.returnValueFromDB(this.cacheKey, this.databaseName, this.success), this.queryNetwork(e, this.cacheKey, this.databaseName, (n) => {
      }, (n) => {
        i.saveValueToDB(n, this.cacheKey, this.databaseName), this.success(n);
      });
      return;
    }
    if (this.storageMode === 0) {
      this.queryNetwork(e, this.cacheKey, this.databaseName, this.success, (n) => {
        i.saveValueToDB(n, this.cacheKey, this.databaseName), this.success(n);
      });
      return;
    }
    this.queryNetwork(e, this.cacheKey, this.databaseName, (n) => {
    }, this.success);
  }
  // Saves a value to the database/cache
  static saveValueToDB(e, n, s) {
    new v(s, ["cache", "cacheExpirations"], 1).openDatabase((r) => {
      e !== void 0 && (r.add("cache", e, n), r.add("cacheExpirations", Date.now(), n));
    });
  }
  // Queries the network and saves the data to the appropriate cache table.
  queryNetwork(e, n, s, r, o) {
    if (!navigator.onLine) {
      this.storageMode === 0 && i.returnValueFromDB(n, s, r);
      return;
    }
    fetch(this.url, {
      credentials: this.credentials,
      method: this.method,
      body: e,
      headers: this.headers
    }).then(this.parser).then(o).catch(this.error);
  }
  // Gets the value in the database and returns that for success.
  static returnValueFromDB(e, n, s) {
    new v(n, ["cache", "cacheExpirations"], 1).openDatabase((r) => {
      r.getByKey("cache", e, (o) => {
        let a = o.target.result;
        a !== void 0 && s(a);
      });
    });
  }
}
var y = /* @__PURE__ */ ((t) => (t[t.NetworkFirst = 0] = "NetworkFirst", t[t.StorageFirst = 1] = "StorageFirst", t[t.NetworkOnly = 2] = "NetworkOnly", t[t.StorageAndUpdate = 3] = "StorageAndUpdate", t))(y || {});
const H = p.defineComponent({
  name: "admin-application",
  data: function() {
    return {
      editors: []
    };
  },
  methods: {
    loadEditors: function() {
      let t = this;
      i.post("/api/query", {
        query: `query{
  editors {
    category
    componentDefinition {
      name
      schema
      scriptFile
    }
    description
    icon
    name
  }
}`
      }).onSuccess((e) => {
        t.editors = e.data.editors;
      }).setMode(y.StorageAndUpdate).send();
    }
  },
  created: function() {
    console.log("Loading Editors"), this.loadEditors();
  }
});
const U = (t) => (S("data-v-bc7d62b0"), t = t(), N(), t), O = { class: "main-application" }, Y = { class: "left-nav" }, x = /* @__PURE__ */ U(() => /* @__PURE__ */ u("div", null, [
  /* @__PURE__ */ u("pre", null, `
            `)
], -1));
function I(t, e, n, s, r, o) {
  return h(), l("div", O, [
    f(" Admin Application "),
    u("div", Y, [
      f(" Left "),
      u("pre", null, "                " + D(t.editors) + `
            `, 1)
    ]),
    x
  ]);
}
const P = /* @__PURE__ */ m(H, [["render", I], ["__scopeId", "data-v-bc7d62b0"]]);
let d = {
  mounted: function(t, e) {
    if (d.onEventBound = d.onEvent.bind({ el: t }), document.addEventListener("click", d.onEventBound), typeof e.value != "function")
      throw new Error("Argument must be a function");
    d.cb = e.value;
  },
  cb: function(t) {
  },
  onEvent: function(t) {
    t.target === this.el || this.el.contains(t.target) || !d.cb || d.cb(t);
  },
  onEventBound: function() {
  },
  unbind: function() {
    document.removeEventListener("click", d.onEventBound);
  },
  update: function(t, e) {
    if (typeof e.value != "function")
      throw new Error("Argument must be a function");
    d.cb = e.value;
  }
};
function G(t) {
  return t.directive("click-outside", d), t;
}
function Q(t) {
  return t == null || (t.config.globalProperties.$filters = {
    moment: function(e, n, s) {
      return e == null ? "N/A" : (s ?? (s = "YYYY-MM-DDThh:mm:ss"), n ?? (n = "M-D-YYYY h:mm A"), K(e, s).format(n));
    },
    capitalize: function(e) {
      return e == null ? "" : e.charAt(0).toUpperCase() + e.slice(1);
    },
    maxsize: function(e, n, s) {
      return e == null ? "" : e.length <= n ? e : (s ?? (s = "..."), e.substring(0, n) + s);
    },
    currency: function(e, n, s) {
      return e == null ? "" : (n ?? (n = "en-US"), s ?? (s = { style: "currency", currency: "USD" }), Intl.NumberFormat(n, s).format(e));
    }
  }), t;
}
class b {
}
String.prototype.slugify = function() {
  return this.trim().replace(/ /g, "-").replace(/-{2,}/g, "-").replace(/^-+|-+$/g, "").replace(/([^a-zA-Z0-9-_/./:]+)/g, "");
};
String.prototype.stripHTML = function() {
  let t = document.createElement("div");
  return t.innerHTML = this, (t.textContent || t.innerText || "").replace(/^\s+|\s+$/g, "");
};
String.prototype.toNumber = function() {
  return this == null ? 0 : parseFloat(this.stripHTML().replace(/[^0-9.-]/g, ""));
};
const J = p.defineComponent({
  name: "DataHandler",
  data: function() {
    return {
      count: 0,
      timer: 0,
      internalData: this.model
    };
  },
  props: {
    model: {
      type: Object,
      default: {}
    },
    schema: {
      type: b,
      default: new b()
    }
  },
  methods: {
    fetchData: function() {
      if (!this.schema.loadUrl)
        return;
      let t = this;
      i.post("/api/query", {
        query: t.schema.datalistQuery
      }).onSuccess((e) => {
        t.schema.datalist = e.data.dropDown;
      }).setMode(y.StorageAndUpdate).send();
    },
    saveData: function() {
    },
    deleteData: function() {
    }
  },
  created: function() {
    if (!this.schema.datalistQuery)
      return;
    this.fetchData();
  },
  watch: {
    model: function(t, e) {
      e !== t && (this.internalModel = t);
    }
  }
});
function Z(t, e, n, s, r, o) {
  return h(), l("div", null, [
    f(" ASDF "),
    (h(!0), l(A, null, E(t.schema.children, (a) => (h(), k(C(a.type), {
      key: a.type,
      data: t.internalData,
      schema: a,
      onSave: t.saveData,
      onDelete: t.deleteData,
      onLoad: t.fetchData
    }, null, 40, ["data", "schema", "onSave", "onDelete", "onLoad"]))), 128)),
    u("pre", null, D(t.internalData), 1)
  ]);
}
const W = /* @__PURE__ */ m(J, [["render", Z]]), X = p.defineComponent({
  data: function() {
    return {
      items: this.items,
      showDropDown: !1
    };
  },
  props: {
    items: Array
  },
  methods: {
    showDropDownFunc: function() {
      this.showDropDown = !0;
    },
    hideDropDownFunc: function() {
      this.showDropDown = !1;
    }
  },
  directives: {
    clickOutside: d
  }
}), R = { class: "unstyled" }, ee = { class: "grouped" }, te = ["href"];
function ne(t, e, n, s, r, o) {
  const a = B("click-outside");
  return F((h(), l("ul", R, [
    u("li", null, [
      u("a", {
        class: "fas fa-circle-user",
        href: "#",
        onClick: e[0] || (e[0] = T((...c) => t.showDropDownFunc && t.showDropDownFunc(...c), ["stop", "prevent"]))
      }),
      u("div", {
        class: w({ show: t.showDropDown, "z-depth-2": t.showDropDown, hidden: !t.showDropDown })
      }, [
        u("ul", ee, [
          (h(!0), l(A, null, E(t.items, (c) => (h(), l("li", {
            key: c.display
          }, [
            u("a", {
              href: c.url,
              class: w([c.icon])
            }, D(c.display), 11, te)
          ]))), 128))
        ])
      ], 2)
    ])
  ])), [
    [a, t.hideDropDownFunc]
  ]);
}
const se = /* @__PURE__ */ m(X, [["render", ne]]), re = (t) => {
  t.component("mithril-data-handler", W), t.component("mithril-side-menu", se);
}, ie = {
  install: (t, e) => {
    Q(t), G(t), re(t);
  }
};
class oe {
  constructor() {
    g(this, "AdminApp");
    console.log("Admin loading"), this.AdminApp = this.SetupComponents(p.createApp({
      data: function() {
        return {};
      }
    })), this.AdminApp.mount("#AdminApplication"), console.log("Admin loaded");
  }
  // Sets up Vue components
  SetupComponents(e) {
    return e.use(ie), e.component("admin-application", P), e.component("settings-editor-component", L), e.component("entity-editor-component", z), e;
  }
}
const ue = (() => {
  new oe();
})();
export {
  ue as default
};

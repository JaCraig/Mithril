using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.FeatureManagement;
using Mithril.Admin.Abstractions.Commands;
using Mithril.Admin.Abstractions.Events;
using Mithril.Admin.Abstractions.Interfaces;
using Mithril.Admin.Abstractions.Services;
using Mithril.Admin.Commands.ViewModels;
using Mithril.API.Abstractions.Commands;
using Mithril.API.Abstractions.Commands.BaseClasses;
using Mithril.API.Abstractions.Commands.Interfaces;
using Mithril.Data.Abstractions.ExtensionMethods;
using System.Security.Claims;

namespace Mithril.Admin.Commands
{
    /// <summary>
    /// Save model command handler
    /// TODO: Add tests
    /// </summary>
    /// <seealso cref="CommandHandlerBaseClass&lt;SaveModelCommand, SaveModelCommandVM&gt;"/>
    public class SaveModelCommandHandler : CommandHandlerBaseClass<SaveModelCommand, SaveModelCommandVM>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveModelCommandHandler"/> class.
        /// </summary>
        /// <param name="editorService">The editor service.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="featureManager">The feature manager.</param>
        public SaveModelCommandHandler(IEditorService editorService, ILogger<SaveModelCommandHandler>? logger, IFeatureManager featureManager)
            : base(logger, featureManager)
        {
            EditorService = editorService;
        }

        /// <summary>
        /// Gets the command type accepted.
        /// </summary>
        /// <value>The command type accepted.</value>
        public override string CommandName { get; } = "SaveModelCommand";

        /// <summary>
        /// Gets the tags (Used by OpenAPI, etc).
        /// </summary>
        /// <value>The tags (Used by OpenAPI, etc).</value>
        public override string[] Tags { get; } = new string[] { "Data" };

        /// <summary>
        /// Gets the editor service.
        /// </summary>
        /// <value>The editor service.</value>
        private IEditorService EditorService { get; }

        /// <summary>
        /// Creates the specified value.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="user">The user.</param>
        /// <returns>A command value converted from the view model.</returns>
        public override async ValueTask<CommandCreationResult?> CreateAsync(SaveModelCommandVM? value, ClaimsPrincipal user)
        {
            if (EditorService is null || value?.Data is null)
            {
                Logger?.LogError("Saving model data failed.");
                return new CommandCreationResult(null, ResultText: "Error bad request.", ReturnCode: StatusCodes.Status400BadRequest);
            }

            IEntityEditor? EntityEditor = EditorService.Editors.OfType<IEntityEditor>().FirstOrDefault(x => x.EntityType == value.EntityType);
            if (EntityEditor?.CanView(user) != true)
            {
                Logger?.LogWarning("Saving model data of type {entityType} failed because user {user} does not have access.", value.EntityType, user.GetName());
                return new CommandCreationResult(null, ResultText: "Unauthorized.", ReturnCode: StatusCodes.Status401Unauthorized);
            }

            Logger?.LogInformation("Saving model data of type {entityType} and ID={id}, sent by {user}", value.EntityType, value.ID, user.GetName());
            if (!await EntityEditor.SaveEntityAsync(value.ID, value.Data, user).ConfigureAwait(false))
            {
                Logger?.LogError("Saving model data of type {entityType} and ID={id} sent by {user} failed.", value.EntityType, value.ID, user.GetName());
                return new CommandCreationResult(null, ResultText: "Error, unable to save.", ReturnCode: StatusCodes.Status500InternalServerError);
            }
            Logger?.LogInformation("Saving model data of type {entityType} and ID={id} sent by {user} succeeded.", value.EntityType, value.ID, user.GetName());
            return new CommandCreationResult(new SaveModelCommand(value.Data, value.EntityType, value.ID));
        }

        /// <summary>
        /// Handles the command.
        /// </summary>
        /// <param name="args">The arguments.</param>
        /// <returns>The events generated by the command.</returns>
        protected override Task<IEvent[]> HandleCommandAsync(SaveModelCommand?[]? args)
        {
            args ??= Array.Empty<SaveModelCommand>();
            return Task.FromResult<IEvent[]>(args.Select(Command => new ModelSavedEvent(Command?.Data ?? "{}", Command?.EntityType, Command?.EntityID ?? 0)).ToArray());
        }
    }
}
// Default variables here.
@tabletLandscape: 1279px;
@tabletPortrait: 800px;
@mobileLandscape: 640px;
@mobilePortrait: 360px;

@defaultFontSize: 1em;
@defaultLineSize: 1.5;
@defaultFontFamily: "Helvetica Neue", Helvetica, Arial, sans-serif;
@defaultSerifFontFamily: gt-super, Georgia, Cambria, "Times New Roman", Times, serif;
@defaultFontWeight: 400;
@defaultFontWeightBold: @defaultFontWeight*1.5;

@roundedCorner: .25em;
@roundedCornerMore: .375em;
@circularCorners: 50%;

@offsetLarge: 50%;
@offset: 34%;
@offsetSmall: 15%;
@offsetVerySmall: 9%;

@lightTextColor: #1A1A1B;
@lightBackgroundColor: #FFF;
@lightCallToActionColor: #2589e7;
@lightSecondaryCallToActionColor: spin(@lightCallToActionColor,180);

@darkTextColor: @lightBackgroundColor;
@darkBackgroundColor: @lightTextColor;
@darkCallToActionColor: spin(@lightCallToActionColor, 180);
@darkSecondaryCallToActionColor: spin(@darkCallToActionColor,180);

@lightTextHighlightColor: tint(@lightTextColor, @offset);
@lightTextShadowColor: shade(@lightTextColor, @offset);
@lightPrimaryColor: .mix-neutral(@lightCallToActionColor)[@result];
@lightPrimaryHighlightColor: tint(@lightPrimaryColor,@offset);
@lightPrimaryShadowColor: shade(@lightPrimaryColor,@offset);
@lightSecondaryColor: .mix-neutral(spin(@lightCallToActionColor,180))[@result];
@lightSecondaryHighlightColor: tint(@lightSecondaryColor,@offset);
@lightSecondaryShadowColor: shade(@lightSecondaryColor,@offset);

@lightBackgroundHighlightColor: mix(@lightTextColor,@lightBackgroundColor,@offsetVerySmall);
@lightBackgroundShadowColor: mix(@lightTextColor,@lightBackgroundColor,@offsetSmall);

@lightBorderColor: shade(@lightBackgroundColor,@offset);
@lightBorderHighlightColor: tint(@lightBorderColor, @offset);
@lightBorderShadowColor: shade(@lightBorderColor, @offset);

@lightPrimaryText: @lightBackgroundColor;
@lightPrimaryBackground: @lightPrimaryColor;
@lightPrimaryBorder: @lightPrimaryShadowColor;
@lightActiveColor: @lightPrimaryColor;
@lightActiveBackground: lighten(@lightActiveColor, @offsetLarge);
@lightActiveBorder: darken(@lightActiveColor, @offsetVerySmall);

@darkTextHighlightColor: shade(@darkTextColor, @offset);
@darkTextShadowColor: tint(@darkTextColor, @offset);
@darkPrimaryColor: .mix-neutral(@darkCallToActionColor)[@result];
@darkPrimaryHighlightColor: shade(@darkPrimaryColor,@offset);
@darkPrimaryShadowColor: tint(@darkPrimaryColor,@offset);
@darkSecondaryColor: .mix-neutral(spin(@darkCallToActionColor,180))[@result];
@darkSecondaryHighlightColor: shade(@darkSecondaryColor,@offset);
@darkSecondaryShadowColor: tint(@darkSecondaryColor,@offset);

@darkBackgroundHighlightColor: mix(@darkTextColor,@darkBackgroundColor,@offsetVerySmall);
@darkBackgroundShadowColor: mix(@darkTextColor,@darkBackgroundColor,@offsetSmall);

@darkBorderColor: tint(@darkBackgroundColor,@offset);
@darkBorderHighlightColor: shade(@darkBorderColor, @offset);
@darkBorderShadowColor: tint(@darkBorderColor, @offset);

@darkPrimaryText: @darkBackgroundColor;
@darkPrimaryBackground: @darkPrimaryColor;
@darkPrimaryBorder: @darkPrimaryHighlightColor;
@darkActiveColor: @darkPrimaryColor;
@darkActiveBackground: shade(@darkActiveColor, @offsetLarge);
@darkActiveBorder: tint(@darkActiveColor, @offsetVerySmall);

@successColor: #3C763D;
@successBackground: lighten(@successColor, @offsetLarge);
@successBorder: saturate(shade(@successColor, @offsetVerySmall),@offsetLarge);
@infoColor: #31708F;
@infoBackground: lighten(@infoColor, @offsetLarge);
@infoBorder: saturate(shade(@infoColor, @offsetVerySmall),@offsetLarge);
@warningColor: #8A6D3B;
@warningBackground: saturate(lighten(@warningColor, @offsetLarge),@offsetLarge);
@warningBorder: saturate(shade(@warningColor, @offsetVerySmall),@offsetLarge);
@errorColor: #A94442;
@errorBackground: saturate(lighten(@errorColor, @offsetLarge),@offsetLarge);
@errorBorder: saturate(shade(@errorColor, @offsetVerySmall),@offsetLarge);

.compliment(@color) {
    @result: spin(@color, 180);
}

.is-cool-color(@color) {
	@result: boolean(hue(@color) < 300 and hue(@color) > 120);
}
.is-high-key-value(@color) {
	@result: boolean(hue(@color) > 30 and hue(@color) < 140);
}
.is-highest-key-value(@color) {
	@result: boolean(hue(@color) < 30);
}

.harmonious-mix(@base,@mix) {
    @result: if(boolean(.is-cool-color(@mix)[@result]),
        if(boolean(.is-high-key-value(@base)[@result]),mix(@mix, @base, 11%),mix(@mix, @base, 16%)),
        if(boolean(.is-high-key-value(@base)[@result]),mix(@mix, @base, 13%),mix(@mix, @base, 23%)));
}

.mix-neutral(@color) {
    @base: .compliment(@color)[@result];
    @result: if(boolean(.is-cool-color(@base)[@result]),
        if(boolean(.is-high-key-value(@color)[@result]),mix(@base, @color, 26%),mix(@base, @color, 23%)),
        if(boolean(.is-high-key-value(@color)[@result]),mix(@base, @color, 31%),mix(@base, @color, 23%)));
}

.layer(@depth:0){
    z-index:@depth;
}

.opacity(@amount) {
    @amount2: @amount * 100;
    filter: alpha(opacity=@amount2);
    opacity: @amount;
}

.depth-0(@color1:rgba(0,0,0,.16),@color2:rgba(0,0,0,.12)) {
    box-shadow: inset 0 0.063em 0.188em 0 @color1, inset 0 0.125em 0.625em 0 @color2;
}

.depth-minus-1(@color1:rgba(0,0,0,.16),@color2:rgba(0,0,0,.12)) {
    box-shadow: inset 0 0.125em 0.313em 0 @color1, inset 0 0.125em 0.625em 0 @color2;
}

.depth-1(@color1:rgba(0,0,0,.16),@color2:rgba(0,0,0,.12)) {
    box-shadow: 0 0.125em 0.313em 0 @color1,0 0.125em 0.625em 0 @color2;
}

.depth-2(@color1:rgba(0,0,0,.2),@color2:rgba(0,0,0,.19)) {
    box-shadow: 0 0.5em 1.063em 0 @color1,0 0.375em 1.25em 0 @color2;
}

.depth-3(@color1:rgba(0,0,0,.24),@color2:rgba(0,0,0,.19)) {
    box-shadow: 0 0.75em 0.938em 0 @color1,0 1.063em 3.125em 0 @color2;
}

.depth-4(@color1:rgba(0,0,0,.22),@color2:rgba(0,0,0,.21)) {
    box-shadow: 0 1em 1.75em 0 @color1,0 1.563em 3.438em 0 @color2;
}

.depth-5(@color1:rgba(0,0,0,.2),@color2:rgba(0,0,0,.22)) {
    box-shadow: 0 1.688em 1.5em 0 @color1,0 2.5em 4.813em 0 @color2;
}

.border(@size: 1px,@style: solid,@color: @lightBorderColor) {
    border: @size @style @color;
}

.roundedBorder(@size: 1px,@style: solid,@color:@lightBorderColor,@radius:@roundedCorner) {
    .border(@size,@style,@color);
    border-radius: @radius;
}

.border-bottom(@size: 1px,@style: solid,@color: @lightBorderColor) {
    border-bottom: @size @style @color;
}

.border-left(@size: 1px,@style: solid,@color: @lightBorderColor) {
    border-left: @size @style @color;
}

.border-right(@size: 1px,@style: solid,@color: @lightBorderColor) {
    border-right: @size @style @color;
}

.border-top(@size: 1px,@style: solid,@color: @lightBorderColor) {
    border-top: @size @style @color;
}

.mixin-svg-arrow(@width,@height,@degrees) {
    @arrow-width: @width * 2;
    @arrow-height: @height * 2;
    background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="@{arrow-width}" height="@{arrow-height}"><path fill="@{color}" transform="rotate(@{degrees})" d="M2.658,0.000 C-13.615,0.000 50.938,0.000 34.662,0.000 C28.662,0.000 23.035,12.002 18.660,12.002 C14.285,12.002 8.594,0.000 2.658,0.000 Z"/></svg>') no-repeat;
    background-size: 100% auto;
    height: @height;
    width: @width;
}

.svg-arrow(@color, @position, @balloon-arrow-size) {
    & when (@position = up) {
        @width: @balloon-arrow-size * 3;
        @height: @balloon-arrow-size;
        @degrees: 0;
        .mixin-svg-arrow(@width, @height, @degrees);
    }
    & when (@position = down) {
        @width: @balloon-arrow-size * 3;
        @height: @balloon-arrow-size;
        @degrees: 180 18 6;
        .mixin-svg-arrow(@width, @height, @degrees);
    }
    & when (@position = left) {
        @width: @balloon-arrow-size;
        @height: @balloon-arrow-size * 3;
        @degrees: -90 18 18;
        .mixin-svg-arrow(@width, @height, @degrees);
    }
    & when (@position = right) {
        @width: @balloon-arrow-size;
        @height: @balloon-arrow-size * 3;
        @degrees: 90 6 6;
        .mixin-svg-arrow(@width, @height, @degrees);
    }
}
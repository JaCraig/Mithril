{"version":3,"file":"site.umd.min.js","sources":["../../../Mithril.Web.Common/build/ts/Framework/Extensions/HTMLElement.ts","../../../Mithril.Web.Common/build/ts/Framework/Extensions/NodeList.ts","../../../Mithril.Web.Common/build/ts/Framework/Validation/FormValidation.ts","../../../Mithril.Web.Common/build/ts/Framework/Logging/Signature.ts","../../../Mithril.Web.Common/build/ts/Framework/Logging/ErrorLogging.ts","../../../Mithril.Web.Common/build/ts/Framework/WebStorage/LocalStorage.ts","../../../Mithril.Web.Common/build/ts/Framework/WebStorage/SessionStorage.ts","../../../Mithril.Web.Common/build/ts/Framework/Database/Database.ts","../../../Mithril.Web.Common/build/ts/Framework/AJAX/Request.ts","../../../Mithril.Web.Common/build/ts/Framework/IO/Downloader.ts","../../../Mithril.Web.Common/build/ts/Framework/Browser/BrowserUtils.ts","../../../Mithril.Web.Common/build/ts/Framework/Hotkey/Globals.ts","../../../Mithril.Web.Common/build/ts/Framework/Hotkey/Keypress.ts","../../../Mithril.Web.Common/build/ts/Framework/Hotkey/Sequence.ts","../../../Mithril.Web.Common/build/ts/Framework/Hotkey/Scope.ts","../../../Mithril.Web.Common/build/ts/Framework/Hotkey/Hotkeys.ts","../../../Mithril.Web.Common/build/ts/Framework/Types/StringDictionary.ts","../../../Mithril.Web.Common/build/ts/Framework/Router/PathPart.ts","../../../Mithril.Web.Common/build/ts/Framework/Router/QueryPart.ts","../../../Mithril.Web.Common/build/ts/Framework/Router/HashPart.ts","../../../Mithril.Web.Common/build/ts/Framework/Router/Route.ts","../../../Mithril.Web.Common/build/ts/Framework/Router/Router.ts","../../../Mithril.Web.Common/build/ts/Framework/History/PageHistory.ts","../../../Mithril.Web.Common/build/ts/Framework/Framework.ts","../../../Mithril.Web.Common/build/ts/Component/VueExtensions/Directives/clickOutside.ts","../../../Mithril.Web.Common/build/ts/Component/DataTypes/ComponentSchema.ts","../../../Mithril.Web.Common/build/ts/Framework/Extensions/String.ts","../../../Mithril.Web.Common/build/ts/Component/DataHandler.vue","../../../Mithril.Web.Common/build/ts/Component/DataHandler.vue?vue&type=template&id=2d9b707c&lang.js","../../../Mithril.Web.Common/build/ts/Component/SideMenu.vue","../../../Mithril.Web.Common/build/ts/Component/SideMenu.vue?vue&type=template&id=7439ea44&lang.js","../../../Mithril.Web.Common/build/ts/Component/VueExtensions/VueComponents.ts","../../../Mithril.Web.Common/build/ts/Component/VueExtensions/MithrilPlugin.ts","../../../Mithril.Web.Common/build/ts/Component/VueExtensions/VueFilters.ts","../../../Mithril.Web.Common/build/ts/Component/VueExtensions/VueDirectives.ts","../../../Mithril.Web.Common/build/ts/Mithril.ts","../../build/ts/default.ts"],"sourcesContent":["declare interface HTMLElement {\r\n    replaceClass(originalClassName: string, newClassName: string): void;\r\n    toggleClass(originalClassName: string, newClassName: string): void;\r\n    removeClass(className: string): void;\r\n    addClass(className: string): void;\r\n    show(): void;\r\n    hide(): void;\r\n    attribute(name: string, value?: string): string;\r\n    hasClass(className: string): boolean;\r\n    getParentByClass(className: string): HTMLElement;\r\n}\r\n\r\n/**\r\n * Determines a parent object that has the class name specified\r\n *\r\n * @param {string} className\r\n * @returns {HTMLElement}\r\n */\r\nHTMLElement.prototype.getParentByClass = function (className: string): HTMLElement {\r\n    let element = this.parentElement;\r\n    while (element && !element.hasClass(className)) {\r\n        element = element.parentElement;\r\n    }\r\n    return element;\r\n};\r\n\r\n/**\r\n * Determines if a CSS class is present\r\n *\r\n * @param {string} className\r\n * @returns {boolean}\r\n */\r\nHTMLElement.prototype.hasClass = function (className: string): boolean {\r\n    return (\" \" + this.className + \" \").indexOf(\" \" + className + \" \") > -1;\r\n};\r\n\r\n/**\r\n * Replaces a CSS class in the element\r\n *\r\n * @param {string} originalClassName\r\n * @param {string} newClassName\r\n */\r\nHTMLElement.prototype.replaceClass = function (originalClassName: string, newClassName: string): void {\r\n    let tempClassName = \" \" + this.className + \" \";\r\n    if (tempClassName.indexOf(originalClassName) === -1) {\r\n        this.addClass(newClassName);\r\n        return;\r\n    }\r\n    if (newClassName === \"\") {\r\n        this.className = tempClassName.replace(new RegExp(\" \" + originalClassName + \" \", \"gi\"), \" \").trim();\r\n    } else {\r\n        this.className = tempClassName.replace(new RegExp(\" \" + originalClassName + \" \", \"gi\"), \" \" + newClassName + \" \").trim();\r\n    }\r\n};\r\n\r\n/**\r\n * Toggles between two CSS classes.\r\n *\r\n * @param {string} originalClassName\r\n * @param {string} newClassName\r\n * @returns {void}\r\n */\r\nHTMLElement.prototype.toggleClass = function (originalClassName: string, newClassName: string): void {\r\n    if (this.hasClass(originalClassName)) {\r\n        this.replaceClass(originalClassName, newClassName);\r\n        return;\r\n    }\r\n    this.replaceClass(newClassName, originalClassName);\r\n};\r\n\r\n/**\r\n * Removes a CSS class from the element\r\n *\r\n * @param {string} className\r\n */\r\nHTMLElement.prototype.removeClass = function (className: string): void {\r\n    this.replaceClass(className, \"\");\r\n};\r\n\r\n/**\r\n * Adds a CSS class to the element\r\n *\r\n * @param {string} className\r\n */\r\nHTMLElement.prototype.addClass = function (className: string): void {\r\n    if (!this.hasClass(className)) {\r\n        this.className += \" \" + className;\r\n    }\r\n};\r\n\r\n/**\r\n * Shows the element\r\n *\r\n */\r\nHTMLElement.prototype.show = function (): void {\r\n    this.replaceClass(\"hidden\", \"show\");\r\n    this.addClass(\"show\");\r\n};\r\n\r\n/**\r\n * Hides the element\r\n */\r\nHTMLElement.prototype.hide = function (): void {\r\n    this.replaceClass(\"show\", \"hidden\");\r\n    this.addClass(\"hidden\");\r\n};\r\n\r\n/**\r\n * Gets or sets an attribute of the element based on the name specified.\r\n *\r\n * @param {string} name\r\n * @param {string} [value=null]\r\n * @returns {string}\r\n */\r\nHTMLElement.prototype.attribute = function (name: string, value: string = null): string {\r\n    if (value != null) {\r\n        this.setAttribute(name, value);\r\n        return value;\r\n    }\r\n    return this.getAttribute(name);\r\n};","declare interface NodeList {\r\n    map<TResult>(callback: (x: Node) => TResult): TResult[];\r\n    filter(callback: (x: Node) => boolean): Node[];\r\n}\r\n\r\n/**\r\n * Basically runs through a node list, runs a function on it and returns the result\r\n *\r\n * @template TResult\r\n * @param {(x: Node) => TResult} callback\r\n * @returns {TResult[]}\r\n */\r\nNodeList.prototype.map = function <TResult>(callback: (x: Node) => TResult): TResult[] {\r\n    let ReturnValues: TResult[] = [];\r\n    for (let x = 0; x < this.length; ++x) {\r\n        ReturnValues = ReturnValues.concat(callback(this[x]));\r\n    }\r\n    return ReturnValues;\r\n};\r\n\r\n/**\r\n * Filters a node list based on the function specified\r\n *\r\n * @param {(x: Node) => boolean} callback\r\n * @returns {Node[]}\r\n */\r\nNodeList.prototype.filter = function (callback: (x: Node) => boolean): Node[] {\r\n    let ReturnValues: Node[] = [];\r\n    for (let x = 0; x < this.length; ++x) {\r\n        if (callback(this[x])) {\r\n            ReturnValues = ReturnValues.concat(this[x]);\r\n        }\r\n    }\r\n    return ReturnValues;\r\n};","import \"../Extensions/HTMLElement\";\r\nimport \"../Extensions/NodeList\";\r\n\r\nimport { StringDictionary } from \"../Types/StringDictionary\";\r\n\r\n// Class to help with form validation\r\nexport class FormValidation {\r\n    constructor() {\r\n        this.errors = [];\r\n        this.messageAttributes = {};\r\n        this.messageAttributes[\"patternMismatch\"] = \"data-error-message-pattern-mismatch\";\r\n        this.messageAttributes[\"rangeOverflow\"] = \"data-error-message-range-overflow\";\r\n        this.messageAttributes[\"rangeUnderflow\"] = \"data-error-message-range-underflow\";\r\n        this.messageAttributes[\"stepMismatch\"] = \"data-error-message-step-mismatch\";\r\n        this.messageAttributes[\"tooLong\"] = \"data-error-message-too-long\";\r\n        this.messageAttributes[\"tooShort\"] = \"data-error-message-too-short\";\r\n        this.messageAttributes[\"badInput\"] = \"data-error-message-bad-input\";\r\n        this.messageAttributes[\"typeMismatch\"] = \"data-error-message-type-mismatch\";\r\n        this.messageAttributes[\"valueMissing\"] = \"data-error-message-value-missing\";\r\n    }\r\n\r\n    // The errors found when validating\r\n    public errors: string[];\r\n\r\n    // message attribute dictionary\r\n    private messageAttributes: StringDictionary<string>;\r\n\r\n    // initializes the validation system for adding custom error messages\r\n    public initialize(): void {\r\n        let inputElements = this.map(document.getElementsByTagName(\"input\"), x => <HTMLInputElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < inputElements.length; ++x) {\r\n            if (inputElements[x].type.toUpperCase() === \"RADIO\"\r\n                || inputElements[x].type.toUpperCase() === \"CHECKBOX\") {\r\n                inputElements[x].addEventListener(\"change\", y => this.inputHandler(<HTMLInputElement>y.target));\r\n            } else {\r\n                inputElements[x].addEventListener(\"input\", y => this.inputHandler(<HTMLInputElement>y.target));\r\n            }\r\n            inputElements[x].addEventListener(\"invalid\", y => this.invalidInputHandler(<HTMLInputElement>y.target));\r\n        }\r\n        let textAreaElements = this.map(document.getElementsByTagName(\"textarea\"), x => <HTMLTextAreaElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < textAreaElements.length; ++x) {\r\n            textAreaElements[x].addEventListener(\"change\", y => this.textAreaHandler(<HTMLTextAreaElement>y.target));\r\n            textAreaElements[x].addEventListener(\"invalid\", y => this.invalidTextAreaHandler(<HTMLTextAreaElement>y.target));\r\n        }\r\n        let selectElements = this.map(document.getElementsByTagName(\"select\"), x => <HTMLSelectElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < selectElements.length; ++x) {\r\n            selectElements[x].addEventListener(\"change\", y => this.selectHandler(<HTMLSelectElement>y.target));\r\n            selectElements[x].addEventListener(\"invalid\", y => this.invalidSelectHandler(<HTMLSelectElement>y.target));\r\n        }\r\n    }\r\n\r\n    private map<TResult>(elements: HTMLCollectionOf<Element>, callback: (x: Node) => TResult): TResult[] {\r\n        let ReturnValues: TResult[] = [];\r\n        for (let x = 0; x < elements.length; ++x) {\r\n            ReturnValues = ReturnValues.concat(callback(elements[x]));\r\n        }\r\n        return ReturnValues;\r\n    }\r\n\r\n    private filter(elements: HTMLCollectionOf<Element>, callback: (x: Node) => boolean): Node[] {\r\n        let ReturnValues: Node[] = [];\r\n        for (let x = 0; x < elements.length; ++x) {\r\n            if (callback(elements[x])) {\r\n                ReturnValues = ReturnValues.concat(elements[x]);\r\n            }\r\n        }\r\n        return ReturnValues;\r\n    }\r\n\r\n    // Initialize an individual form\r\n    public initializeForm(form: HTMLFormElement): void {\r\n        let inputElements = this.map(form.getElementsByTagName(\"input\"), x => <HTMLInputElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < inputElements.length; ++x) {\r\n            if (inputElements[x].type.toUpperCase() === \"RADIO\"\r\n                || inputElements[x].type.toUpperCase() === \"CHECKBOX\") {\r\n                inputElements[x].addEventListener(\"change\", y => this.inputHandler(<HTMLInputElement>y.target));\r\n            } else {\r\n                inputElements[x].addEventListener(\"input\", y => this.inputHandler(<HTMLInputElement>y.target));\r\n            }\r\n            inputElements[x].addEventListener(\"invalid\", y => this.invalidInputHandler(<HTMLInputElement>y.target));\r\n        }\r\n        let textAreaElements = this.map(form.getElementsByTagName(\"textarea\"), x => <HTMLTextAreaElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < textAreaElements.length; ++x) {\r\n            textAreaElements[x].addEventListener(\"change\", y => this.textAreaHandler(<HTMLTextAreaElement>y.target));\r\n            textAreaElements[x].addEventListener(\"invalid\", y => this.invalidTextAreaHandler(<HTMLTextAreaElement>y.target));\r\n        }\r\n        let selectElements = this.map(form.getElementsByTagName(\"select\"), x => <HTMLSelectElement>x).filter(x => x.willValidate);\r\n        for (let x = 0; x < selectElements.length; ++x) {\r\n            selectElements[x].addEventListener(\"change\", y => this.selectHandler(<HTMLSelectElement>y.target));\r\n            selectElements[x].addEventListener(\"invalid\", y => this.invalidSelectHandler(<HTMLSelectElement>y.target));\r\n        }\r\n    }\r\n\r\n    // invalid input handler\r\n    private invalidInputHandler(input: HTMLInputElement): void {\r\n        if (!input.validity.valid) {\r\n            let errorMessages = this.getErrorMessages(input, input.validity);\r\n            if (errorMessages.length > 0) {\r\n                input.setCustomValidity(errorMessages.join(\"\\n\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    // invalid text area handler\r\n    private invalidTextAreaHandler(textarea: HTMLTextAreaElement): void {\r\n        if (!textarea.validity.valid) {\r\n            let errorMessages = this.getErrorMessages(textarea, textarea.validity);\r\n            if (errorMessages.length > 0) {\r\n                textarea.setCustomValidity(errorMessages.join(\"\\n\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    // invalid select handler\r\n    private invalidSelectHandler(select: HTMLSelectElement): void {\r\n        if (!select.validity.valid) {\r\n            let errorMessages = this.getErrorMessages(select, select.validity);\r\n            if (errorMessages.length > 0) {\r\n                select.setCustomValidity(errorMessages.join(\"\\n\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    // Input handler\r\n    private inputHandler(input: HTMLInputElement): void {\r\n        if (input.type.toUpperCase() === \"RADIO\") {\r\n            let elements = document.getElementsByName(input.name);\r\n            for (let x = 0; x < elements.length; ++x) {\r\n                let element = <HTMLInputElement>elements[x];\r\n                element.setCustomValidity(\"\");\r\n            }\r\n        } else {\r\n            input.setCustomValidity(\"\");\r\n        }\r\n        input.checkValidity();\r\n    }\r\n\r\n    // text area handler\r\n    private textAreaHandler(textarea: HTMLTextAreaElement): void {\r\n        textarea.setCustomValidity(\"\");\r\n        textarea.checkValidity();\r\n    }\r\n\r\n    // select handler\r\n    private selectHandler(select: HTMLSelectElement): void {\r\n        select.setCustomValidity(\"\");\r\n        select.checkValidity();\r\n    }\r\n\r\n    // Validates all elements, returning false if there are errors, true otherwise.\r\n    public validate(): boolean {\r\n        let result = true;\r\n        this.errors = [];\r\n        let inputElements = this.filter(document.getElementsByTagName(\"input\"),\r\n            x => !this.validateInput((<HTMLInputElement>x)));\r\n        result = result && inputElements.length === 0;\r\n        let selectElements = this.filter(document.getElementsByTagName(\"select\"),\r\n            x => !this.validateSelect((<HTMLSelectElement>x)));\r\n        result = result && selectElements.length === 0;\r\n        let textareaElements = this.filter(document.getElementsByTagName(\"textarea\"),\r\n            x => !this.validateTextArea((<HTMLTextAreaElement>x)));\r\n        result = result && textareaElements.length === 0;\r\n        return result;\r\n    }\r\n\r\n    // Validates all elements in the form, returning the list of error messages.\r\n    public validateForm(form: HTMLFormElement): String[] {\r\n        let result: String[] = [];\r\n        this.errors = [];\r\n        let inputElements = this.filter(form.getElementsByTagName(\"input\"),\r\n            x => !this.validateInput((<HTMLInputElement>x)))\r\n            .map(x => this.getErrorMessages(<HTMLInputElement>x, (<HTMLInputElement>x).validity))\r\n            .filter(x => x.length !== 0);\r\n        for (let x = 0; x < inputElements.length; ++x) {\r\n            result = result.concat(inputElements[x]);\r\n        }\r\n        let selectElements = this.filter(form.getElementsByTagName(\"select\"),\r\n            x => !this.validateSelect((<HTMLSelectElement>x)))\r\n            .map(x => this.getErrorMessages(<HTMLSelectElement>x, (<HTMLSelectElement>x).validity))\r\n            .filter(x => x.length !== 0);\r\n        for (let x = 0; x < selectElements.length; ++x) {\r\n            result = result.concat(selectElements[x]);\r\n        }\r\n        let textareaElements = this.filter(form.getElementsByTagName(\"textarea\"),\r\n            x => !this.validateTextArea((<HTMLTextAreaElement>x)))\r\n            .map(x => this.getErrorMessages(<HTMLTextAreaElement>x, (<HTMLTextAreaElement>x).validity))\r\n            .filter(x => x.length !== 0);\r\n        for (let x = 0; x < textareaElements.length; ++x) {\r\n            result = result.concat(textareaElements[x]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Validates an individual element, returning the list of error messages.\r\n    public validateElement(element: HTMLElement): String[] {\r\n        let result: String[] = [];\r\n        if (element.tagName === \"INPUT\" && !this.validateInput((<HTMLInputElement>element))) {\r\n            let tempResults = this.getErrorMessages((<HTMLInputElement>element), (<HTMLInputElement>element).validity)\r\n                .filter(x => x.length !== 0);\r\n            for (let x = 0; x < tempResults.length; ++x) {\r\n                result = result.concat(tempResults[x]);\r\n            }\r\n        } else if (element.tagName === \"SELECT\" && !this.validateSelect((<HTMLSelectElement>element))) {\r\n            let tempResults = this.getErrorMessages((<HTMLSelectElement>element), (<HTMLSelectElement>element).validity)\r\n                .filter(x => x.length !== 0);\r\n            for (let x = 0; x < tempResults.length; ++x) {\r\n                result = result.concat(tempResults[x]);\r\n            }\r\n        } else if (element.tagName === \"TEXTAREA\" && !this.validateTextArea((<HTMLTextAreaElement>element))) {\r\n            let tempResults = this.getErrorMessages((<HTMLTextAreaElement>element), (<HTMLTextAreaElement>element).validity)\r\n                .filter(x => x.length !== 0);\r\n            for (let x = 0; x < tempResults.length; ++x) {\r\n                result = result.concat(tempResults[x]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // validates a select object\r\n    private validateSelect(select: HTMLSelectElement): boolean {\r\n        if (!select.checkValidity()) {\r\n            let tempValue = this.getErrorMessages(select, select.validity);\r\n            if (tempValue.length !== 0) {\r\n                this.errors = this.errors.concat(tempValue);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // validates a text area object\r\n    private validateTextArea(textarea: HTMLTextAreaElement): boolean {\r\n        if (!textarea.checkValidity()) {\r\n            let tempValue = this.getErrorMessages(textarea, textarea.validity);\r\n            if (tempValue.length !== 0) {\r\n                this.errors = this.errors.concat(tempValue);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // gets the error messages based on the validation state and element's defined error messages\r\n    private getErrorMessages(element: HTMLElement, validity: ValidityState): string[] {\r\n        let tempValue: string[] = [];\r\n        for (let key in this.messageAttributes) {\r\n            if ((<any>validity)[key]) {\r\n                let message = element.attribute(this.messageAttributes[key]);\r\n                if (message !== null) {\r\n                    tempValue = tempValue.concat(message);\r\n                }\r\n            }\r\n        }\r\n        if (tempValue.length === 0) {\r\n            let generalMessage = element.attribute(\"data-error-message\");\r\n            if (generalMessage !== null) {\r\n                tempValue = tempValue.concat(generalMessage);\r\n            } else {\r\n                tempValue = tempValue.concat((<HTMLInputElement>element).validationMessage);\r\n            }\r\n        }\r\n        return tempValue;\r\n    }\r\n\r\n    // validates an input object\r\n    private validateInput(input: HTMLInputElement): boolean {\r\n        if (!input.checkValidity()) {\r\n            let tempValue = this.getErrorMessages(input, input.validity);\r\n            if (tempValue.length !== 0) {\r\n                this.errors = this.errors.concat(tempValue);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","export class Signature {\r\n    //Constructor\r\n    constructor() {\r\n        this.params = [];\r\n    }\r\n\r\n    //Function name\r\n    public name: string;\r\n\r\n    //Function parameters\r\n    public params: any[];\r\n\r\n    //Converts the class to a string\r\n    public toString(): string {\r\n        let params = this.params.length > 0\r\n            ? \"'\" + this.params.join(\"', '\") + \"'\"\r\n            : \"\";\r\n        return this.name + \"(\" + params + \")\";\r\n    }\r\n}","import { Signature } from \"./Signature\";\r\n\r\ndeclare global {\r\n    interface Function {\r\n        trace(): any[];\r\n        signature(): Signature;\r\n        getName(): any;\r\n    }\r\n}\r\n\r\n// declare var Function: FunctionConstructor;\r\n\r\n//Does a stack trace of the function.\r\nFunction.prototype.trace = function () {\r\n    var trace = [];\r\n    var curr = this;\r\n    while (curr) {\r\n        trace.push(curr.signature());\r\n        curr = curr.caller;\r\n    }\r\n    return trace;\r\n};\r\n\r\n//Gets the function's signature.\r\nFunction.prototype.signature = function () {\r\n    var signature = new Signature();\r\n    signature.name = this.getName();\r\n    if (this.arguments) {\r\n        for (var i = 0; i < this.arguments.length; i++) {\r\n            signature.params.push(this.arguments[i]);\r\n        }\r\n    }\r\n    return signature;\r\n};\r\n\r\n//Gets the function's name if it has one.\r\nFunction.prototype.getName = function () {\r\n    if (this.name) {\r\n        return this.name;\r\n    }\r\n    var definition = this.toString().split(\"\\n\")[0];\r\n    var exp = /^function ([^\\s(]+).+/;\r\n    if (exp.test(definition)) {\r\n        return definition.split(\"\\n\")[0].replace(exp, \"$1\") || \"anonymous\";\r\n    }\r\n    return \"anonymous\";\r\n};\r\n\r\n//Handles error logging\r\nexport class ErrorLogging {\r\n    //constructor\r\n    constructor() {\r\n        this.logError = (ex, stack) => { };\r\n    }\r\n\r\n    //Logs the error message. Includes the message and stack trace information.\r\n    public logError: (message: string, stack: string) => void;\r\n\r\n    //Sets the logging function that the system uses\r\n    public setLoggingFunction(logger: (message: string, stack: string) => void): void {\r\n        this.logError = logger;\r\n    }\r\n\r\n    //called when an error is thrown.\r\n    public onError(message: string, filename?: string, lineno?: number, colno?: number, error?: Error): void {\r\n        this.logError(message, error?.stack || \"\");\r\n    }\r\n}","import { IStorage } from './Interfaces/IStorage'\r\n\r\n// Stores data locally on the browser\r\nexport class LocalStorage implements IStorage {\r\n    // sets the value of an item for long term storage\r\n    public set(key: string, value: string): void {\r\n        localStorage.setItem(key, value);\r\n    }\r\n\r\n    // sets the value of an item for long term storage (used when saving objects)\r\n    public setObject(key: string, value: any): void {\r\n        this.set(key, JSON.stringify(value));\r\n    }\r\n\r\n    // gets a value based on the key specified\r\n    public get(key: string, defaultValue = \"\"): any {\r\n        return localStorage.getItem(key) || defaultValue;\r\n    }\r\n\r\n    // Returns true if the key is present in local storage, false otherwise.\r\n    public has(key: string): boolean {\r\n        return this.get(key, null) !== null;\r\n    }\r\n\r\n    // Removes an item from local storage\r\n    public remove(key: string): void {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    // Clears local storage of all items\r\n    public clear(): void {\r\n        localStorage.clear();\r\n    }\r\n\r\n    // Returns the number of items in storage\r\n    get length(): number {\r\n        return localStorage.length;\r\n    }\r\n\r\n    // Gets the key of the item at the index specified\r\n    public key(index: number): string {\r\n        return localStorage.key(index);\r\n    }\r\n\r\n    // gets a value based on the key specified (used when saving objects)\r\n    public getObject(key: string, defaultValue: any = null): any {\r\n        let value = this.get(key);\r\n        return (value && JSON.parse(value)) || defaultValue;\r\n    }\r\n}","import { IStorage } from './Interfaces/IStorage'\r\n\r\n// Stores data for the session on the browser\r\nexport class SessionStorage implements IStorage {\r\n    // sets the value of an item for long term storage\r\n    public set(key: string, value: string): void {\r\n        sessionStorage.setItem(key, value);\r\n    }\r\n\r\n    // sets the value of an item for long term storage (used when saving objects)\r\n    public setObject(key: string, value: any): void {\r\n        this.set(key, JSON.stringify(value));\r\n    }\r\n\r\n    // gets a value based on the key specified\r\n    public get(key: string, defaultValue = \"\"): any {\r\n        return sessionStorage.getItem(key) || defaultValue;\r\n    }\r\n\r\n    // Returns true if the key is present in local storage, false otherwise.\r\n    public has(key: string): boolean {\r\n        return this.get(key, null) !== null;\r\n    }\r\n\r\n    // Removes an item from local storage\r\n    public remove(key: string): void {\r\n        sessionStorage.removeItem(key);\r\n    }\r\n\r\n    // Clears local storage of all items\r\n    public clear(): void {\r\n        sessionStorage.clear();\r\n    }\r\n\r\n    // Returns the number of items in storage\r\n    get length(): number {\r\n        return sessionStorage.length;\r\n    }\r\n\r\n    // Gets the key of the item at the index specified\r\n    public key(index: number): string {\r\n        return sessionStorage.key(index);\r\n    }\r\n\r\n    // gets a value based on the key specified (used when saving objects)\r\n    public getObject(key: string, defaultValue: any = null): any {\r\n        let value = this.get(key);\r\n        return (value && JSON.parse(value)) || defaultValue;\r\n    }\r\n}","// Database connection class\r\nexport class DatabaseConnection {\r\n    // constructor\r\n    constructor(dbName: string, tables: string[], version: number) {\r\n        this.DBName = dbName;\r\n        this.Version = version;\r\n        let request = indexedDB.open(dbName, version);\r\n        request.onupgradeneeded = (ev: any) => {\r\n            this.database = ev.target.result;\r\n            for (let x = 0; x < tables.length; ++x) {\r\n                let table = tables[x];\r\n                if (this.database.objectStoreNames.contains(table)) {\r\n                    this.database.deleteObjectStore(table);\r\n                }\r\n                this.database.createObjectStore(table);\r\n            }\r\n        };\r\n        request.onsuccess = (ev: any) => {\r\n            this.database = ev.target.result;\r\n        };\r\n    }\r\n\r\n    // Database name\r\n    private DBName: string;\r\n\r\n    // database version\r\n    private Version: number;\r\n\r\n    // open the database table\r\n    public openDatabase(onsuccess: (connection: DatabaseConnection) => any): void {\r\n        let request = indexedDB.open(this.DBName, this.Version);\r\n        request.onsuccess = (ev: any) => {\r\n            this.database = ev.target.result;\r\n            return onsuccess(this);\r\n        };\r\n    }\r\n\r\n    public add(table: string, obj: any, key: IDBValidKey): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).put(obj, key);\r\n    }\r\n\r\n    public remove(table: string, key: IDBValidKey): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).delete(key);\r\n    }\r\n\r\n    public getByKey(table: string, key: IDBValidKey, onSuccess: (ev: Event) => any): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).get(key);\r\n        req.onsuccess = onSuccess;\r\n    }\r\n\r\n    public getKeys(table: string, onSuccess: (ev: Event) => any): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).getAllKeys();\r\n        req.onsuccess = onSuccess;\r\n    }\r\n\r\n    public get(table: string, query: string, onSuccess: (ev: Event) => any): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).get(query);\r\n        req.onsuccess = onSuccess;\r\n    }\r\n\r\n    public getAll(table: string, onSuccess: (ev: Event) => any, query?: string): void {\r\n        let req = this.database.transaction(table, \"readwrite\").objectStore(table).getAll(query);\r\n        req.onsuccess = onSuccess;\r\n    }\r\n\r\n    // Database pointer\r\n    private database: IDBDatabase;\r\n}","import { DatabaseConnection } from \"../Database/Database\";\r\n\r\n//Ajax request that the system uses.\r\nexport class Request {\r\n    // Constructor\r\n    constructor(method: string, url: string, data?: any) {\r\n        this.url = url;\r\n        this.method = method.toUpperCase();\r\n        this.data = data;\r\n        this.headers = new Headers();\r\n        if (this.method !== \"GET\" &&\r\n            this.method !== \"HEAD\" &&\r\n            this.method !== \"DELETE\" &&\r\n            this.method !== \"TRACE\") {\r\n            this.type(\"application/json\");\r\n        }\r\n        this.accept(\"application/json\");\r\n        this.parser = x => x.json();\r\n        this.serializer = x => JSON.stringify(x);\r\n        this.storageMode = StorageMode.NetworkOnly;\r\n        this.databaseName = \"MithrilStorage\"\r\n        this.cacheKey = this.url + this.serializer(this.data);\r\n        this.credentials = \"same-origin\";\r\n    }\r\n\r\n    // The serializer that the application uses\r\n    private serializer: (data: any) => string;\r\n\r\n    // URL to call\r\n    private url: string;\r\n\r\n    // Credentials type sent with the request (\"same-origin\", \"include\", or \"omit\")\r\n    private credentials: RequestCredentials;\r\n\r\n    // Method to use when calling\r\n    private method: string;\r\n\r\n    // Success callback\r\n    private success: (response: any) => any;\r\n\r\n    // Parser callback\r\n    private parser: (response: Response) => Promise<any>;\r\n\r\n    // Data to send in the request\r\n    private data: any;\r\n\r\n    // Error callback\r\n    private error: (reason: any) => any;\r\n\r\n    // Any headers to add to the call\r\n    private headers: Headers;\r\n\r\n    // The cache key\r\n    private cacheKey: string;\r\n\r\n    // Database to cache the results\r\n    private databaseName: string;\r\n\r\n    // Storage mode\r\n    private storageMode: StorageMode;\r\n\r\n    // GET method.\r\n    public static get(url: string, data?: any): Request {\r\n        return Request.makeRequest(\"GET\", url, data);\r\n    }\r\n\r\n    // A request using a HTTP verb that is not GET, POST, PUT, or DELETE\r\n    public static makeRequest(method: string, url: string, data?: any): Request {\r\n        return new Request(method, url, data);\r\n    }\r\n\r\n    // POST method.\r\n    public static post(url: string, data?: any): Request {\r\n        return Request.makeRequest(\"POST\", url, data);\r\n    }\r\n\r\n    // PUT method.\r\n    public static put(url: string, data?: any): Request {\r\n        return Request.makeRequest(\"PUT\", url, data);\r\n    }\r\n\r\n    // DELETE method.\r\n    public static delete(url: string, data?: any): Request {\r\n        return Request.makeRequest(\"DELETE\", url, data);\r\n    }\r\n\r\n    // Adds a callback to call if the AJAX request succeeds.\r\n    public onSuccess(callback: (ev: any) => any): Request {\r\n        this.success = callback;\r\n        return this;\r\n    }\r\n\r\n    // Adds a callback to call if the AJAX request fails.\r\n    public onError(callback: (ev: any) => any): Request {\r\n        this.error = callback;\r\n        return this;\r\n    }\r\n\r\n    // Adds a header value to the AJAX request.\r\n    public setHeader(key: string, value: string): Request {\r\n        this.headers.set(key, value);\r\n        return this;\r\n    }\r\n\r\n    // Sets the cache key\r\n    public setCacheKey(key: string): Request {\r\n        this.cacheKey = key;\r\n        return this;\r\n    }\r\n\r\n    // Sets the credentials type used for the call\r\n    public setCredentials(type: RequestCredentials): Request {\r\n        this.credentials = type;\r\n        return this;\r\n    }\r\n\r\n    // Short hand for setting the content type header value\r\n    public type(value: string): Request {\r\n        return this.setHeader(\"Content-Type\", value);\r\n    }\r\n\r\n    // Short hand for setting the accepts header value\r\n    public accept(value: string): Request {\r\n        return this.setHeader(\"Accept\", value);\r\n    }\r\n\r\n    // Sets the parser that the request uses\r\n    public setParser(parser: (response: Response) => Promise<any>): Request {\r\n        this.parser = parser;\r\n        return this;\r\n    }\r\n\r\n    // Ensures that the result of the request will be cached and used in future requests.\r\n    public setMode(storageMode: StorageMode, databaseName: string = \"MithrilStorage\"): Request {\r\n        this.databaseName = databaseName;\r\n        this.storageMode = storageMode;\r\n        return this;\r\n    }\r\n\r\n    // Sets the serializer that the request uses\r\n    public setSerializer(serializer: (data: any) => string): Request {\r\n        this.serializer = serializer;\r\n        return this;\r\n    }\r\n\r\n    // Actually sends the request, parses it, and calls either the\r\n    // success or error functions if they exist.\r\n    public send(): void {\r\n        if (this.error === undefined || this.error === null) {\r\n            this.error = x => { };\r\n        }\r\n        if (this.success === undefined || this.success === null) {\r\n            this.success = x => { };\r\n        }\r\n        let serializedData = this.serializer(this.data);\r\n        if (this.storageMode === StorageMode.StorageFirst) {\r\n            Request.returnValueFromDB(this.cacheKey, this.databaseName, this.success);\r\n            this.queryNetwork(serializedData, this.cacheKey, this.databaseName, response => { }, response => {\r\n                Request.saveValueToDB(response, this.cacheKey, this.databaseName);\r\n            });\r\n            return;\r\n        }\r\n        if (this.storageMode === StorageMode.StorageAndUpdate) {\r\n            Request.returnValueFromDB(this.cacheKey, this.databaseName, this.success);\r\n            this.queryNetwork(serializedData, this.cacheKey, this.databaseName, response => { }, response => {\r\n                Request.saveValueToDB(response, this.cacheKey, this.databaseName);\r\n                this.success(response);\r\n            });\r\n            return;\r\n        }\r\n        if (this.storageMode === StorageMode.NetworkFirst) {\r\n            this.queryNetwork(serializedData, this.cacheKey, this.databaseName, this.success, response => {\r\n                Request.saveValueToDB(response, this.cacheKey, this.databaseName);\r\n                this.success(response);\r\n            });\r\n            return;\r\n        }\r\n        this.queryNetwork(serializedData, this.cacheKey, this.databaseName, x => { }, this.success);\r\n    }\r\n\r\n    // Saves a value to the database/cache\r\n    private static saveValueToDB(data: string, dataKey: string, databaseName: string) {\r\n        new DatabaseConnection(databaseName, [\"cache\", \"cacheExpirations\"], 1)\r\n            .openDatabase(database => {\r\n                if (data === undefined) {\r\n                    return;\r\n                }\r\n                database.add(\"cache\", data, dataKey);\r\n                database.add(\"cacheExpirations\", Date.now(), dataKey);\r\n            });\r\n    }\r\n\r\n    // Queries the network and saves the data to the appropriate cache table.\r\n    private queryNetwork(\r\n        serializedData: string,\r\n        dataKey: string,\r\n        databaseName: string,\r\n        offlineCallback: (response: any) => any,\r\n        onlineCallback: (response: any) => any) {\r\n        if (!navigator.onLine) {\r\n            if (this.storageMode === StorageMode.NetworkFirst) {\r\n                Request.returnValueFromDB(dataKey, databaseName, offlineCallback);\r\n            }\r\n            return;\r\n        }\r\n        fetch(this.url, {\r\n            credentials: this.credentials,\r\n            method: this.method,\r\n            body: serializedData,\r\n            headers: this.headers\r\n        })\r\n            .then(this.parser)\r\n            .then(onlineCallback)\r\n            .catch(this.error);\r\n    }\r\n\r\n    // Gets the value in the database and returns that for success.\r\n    private static returnValueFromDB(dataKey: string, databaseName: string, callback: (response: any) => any) {\r\n        new DatabaseConnection(databaseName, [\"cache\", \"cacheExpirations\"], 1)\r\n            .openDatabase(database => {\r\n                database.getByKey(\"cache\", dataKey, event => {\r\n                    let result = (<any>event.target).result;\r\n                    if (result === undefined) {\r\n                        return;\r\n                    }\r\n                    callback(result);\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\n// Storage mode\r\nexport enum StorageMode {\r\n    // network first\r\n    NetworkFirst = 0,\r\n    // storage first\r\n    StorageFirst = 1,\r\n    // network only\r\n    NetworkOnly = 2,\r\n    // Storage and then update\r\n    StorageAndUpdate = 3\r\n}","import { BrowserUtils } from \"../Browser/BrowserUtils\";\r\n\r\n// Acts as a way to \"download\" or export data to a file in the browser via JS.\r\nexport class Downloader {\r\n    // Exports the array of entries to the file specified\r\n    public static exportData(data: Array<any>, columns: Array<ColumnHeader>, fileName: string = BrowserUtils.Id, type: FileTypes = FileTypes.CSV): void {\r\n        if (data.length == 0) {\r\n            return;\r\n        }\r\n        fileName = fileName || BrowserUtils.Id;\r\n        let returnValue = \"\";\r\n        if (type === FileTypes.CSV) {\r\n            returnValue = this.exportCSV(data, columns, fileName);\r\n        } else {\r\n            returnValue = data.join(\",\");\r\n        }\r\n        this.download(returnValue, fileName);\r\n    }\r\n\r\n    // Capitalizes a string's first character\r\n    private static capitalize(str: string | String): string {\r\n        if (!str) {\r\n            return \"\";\r\n        }\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    // Exports a CSV of the data\r\n    private static exportCSV(data: Array<any>, columns: Array<ColumnHeader>, fileName: string): string {\r\n        let returnValue = \"\";\r\n        let columnNames = Object.keys(data[0]);\r\n        let splitter = \"\";\r\n        for (let z = 0; z < columnNames.length; ++z) {\r\n            let columnName = columnNames[z];\r\n            let actualName = columns.filter(function (column) {\r\n                return column.property === columnName;\r\n            });\r\n            if (actualName.length === 0) {\r\n                actualName = [{ display: columnName, property: columnName }];\r\n            }\r\n            let header = actualName[0]?.display || actualName[0]?.property || columnName;\r\n            returnValue += splitter + \"\\\"\" + this.capitalize(header) + \"\\\"\";\r\n            splitter = \",\";\r\n        }\r\n        returnValue += \"\\n\";\r\n        for (let x = 0; x < data.length; ++x) {\r\n            let row = data[x];\r\n            let columns = Object.keys(row);\r\n            splitter = \"\";\r\n            for (let y = 0; y < columns.length; ++y) {\r\n                returnValue += splitter + \"\\\"\" + row[columns[y]].replaceAll(\"\\\"\", \"'\") + \"\\\"\";\r\n                splitter = \",\";\r\n            }\r\n            returnValue += \"\\n\";\r\n        }\r\n        return returnValue;\r\n    }\r\n\r\n    // Downloads the data as the file specified\r\n    public static download(data: string, fileName: string): void {\r\n        if (data == null) {\r\n            return;\r\n        }\r\n        if ((<any>navigator).msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\r\n            (<any>navigator).msSaveBlob(new Blob([data]), fileName);\r\n            return;\r\n        }\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data));\r\n        element.setAttribute('download', fileName);\r\n\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n\r\n        document.body.removeChild(element);\r\n    }\r\n}\r\n\r\nexport class ColumnHeader {\r\n    public display: String;\r\n    public property: String;\r\n}\r\n\r\nexport enum FileTypes {\r\n    CSV\r\n}","// A set of browser/window related util functions.\r\nexport class BrowserUtils {\r\n    // Returns the current domain.\r\n    static get domain(): string {\r\n        return window.location.protocol + \"//\" + window.location.host + \"/\";\r\n    }\r\n\r\n    // Determines if this is being run locally or in production.\r\n    static get isLocal(): boolean {\r\n        return (/^http:\\/\\/localhost:\\d{5}\\/$/).test(BrowserUtils.domain);\r\n    }\r\n\r\n    // Gets the hash without the hash bang.\r\n    static get HashBang(): string {\r\n        return window.location.hash.replace(\"#!\", \"\");\r\n    }\r\n\r\n    // Gets the text after the last slash. Presumably the ID needed.\r\n    static get Id(): string {\r\n        return window.location.pathname.substring(window.location.pathname.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    // Gets a value from the query string.\r\n    public static GetQueryString(field: string): string {\r\n        let href = window.location.href;\r\n        var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');\r\n        var string = reg.exec(href);\r\n        return string ? string[1] : null;\r\n    }\r\n\r\n    // Sets the title for the page.\r\n    public static setPageTitle(title: string): void {\r\n        document.title = title;\r\n    }\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\n\r\n//Defines the hotkeys system's global values\r\nexport class Globals {\r\n    //Key mappings for various keys\r\n    public static keyMappings: StringDictionary<number> = {\r\n        'BACKSPACE': 8,\r\n        'TAB': 9,\r\n        'ENTER': 13,\r\n        'SHIFT': 16,\r\n        'CTRL': 17,\r\n        'ALT': 18,\r\n        'PAUSE': 19,\r\n        'CAPSLOCK': 20,\r\n        'ESCAPE': 27,\r\n        'SPACE': 32,\r\n        'PAGEUP': 33,\r\n        'PAGEDOWN': 34,\r\n        'END': 35,\r\n        'HOME': 36,\r\n        'LEFT': 37,\r\n        'UP': 38,\r\n        'RIGHT': 39,\r\n        'DOWN': 40,\r\n        'INS': 45,\r\n        'DEL': 46,\r\n        'META': 91,\r\n        '*': 106,\r\n        '+': 107,\r\n        'MINUS': 109,\r\n        'F1': 112,\r\n        'F2': 113,\r\n        'F3': 114,\r\n        'F4': 115,\r\n        'F5': 116,\r\n        'F6': 117,\r\n        'F7': 118,\r\n        'F8': 119,\r\n        'F9': 120,\r\n        'F10': 121,\r\n        'F11': 122,\r\n        'F12': 123,\r\n        'NUMLOCK': 144,\r\n        'SCROLLLOCK': 145,\r\n        ';': 186,\r\n        '=': 187,\r\n        '': 188,\r\n        '-': 189,\r\n        '.': 190,\r\n        '/': 191,\r\n        '`': 192,\r\n        '[': 219,\r\n        '\\\\': 220,\r\n        ']': 221,\r\n        \"'\": 222\r\n    };\r\n}","import { Globals } from './Globals'\r\n\r\n// Individual key press\r\nexport class Keypress {\r\n    // Constructor\r\n    constructor(keys: string) {\r\n        this.keys = this.getKeys(keys);\r\n    }\r\n\r\n    // actual key codes\r\n    private keys: number[];\r\n\r\n    // gets the key codes for the string passed in\r\n    private getKeys(keyCode: string): number[] {\r\n        return keyCode.toUpperCase().split(/-(?!$)/).map(x => Globals.keyMappings[x] || x.charCodeAt(0));\r\n    }\r\n\r\n    // determines if the key code is pressed\r\n    public isPressed(keyCode: number[]): boolean {\r\n        let keysPressed = keyCode;\r\n        if (keysPressed.length !== this.keys.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < keysPressed.length; ++x) {\r\n            if (this.keys.indexOf(keysPressed[x]) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","import { Keypress } from './Keypress'\r\nimport { Scope } from './Scope'\r\n\r\n// Sequence of key presses\r\nexport class Sequence {\r\n    // constructor\r\n    constructor(keyCodes: string, callback: (event: KeyboardEvent, handler: any) => void) {\r\n        this.keyCodeSequence = keyCodes.toUpperCase();\r\n        this.keyCodes = keyCodes.toUpperCase().split(\" \").map(x => new Keypress(x));\r\n        this.callback = callback;\r\n        this.length = this.keyCodes.length;\r\n        this.isDefault = \"<*>\" === keyCodes;\r\n    }\r\n\r\n    // callback to run when keys are pressed\r\n    public callback: (event: KeyboardEvent, handler: any) => void;\r\n\r\n    // The key code sequence\r\n    public keyCodeSequence: string;\r\n\r\n    // The individual key presses in this sequence\r\n    private keyCodes: Keypress[];\r\n\r\n    // Length of the sequence\r\n    public length: number;\r\n\r\n    // determines if this a default catch\r\n    public isDefault: boolean;\r\n\r\n    // calls the callback function with the data specified\r\n    public call(keyCodes: number[][], event: KeyboardEvent, scope: Scope): boolean {\r\n        this.callback(event, { scope: scope, keysPressed: keyCodes });\r\n        return true;\r\n    }\r\n\r\n    // Runs the callback based on the keycode being pressed\r\n    public press(keyCodes: number[][], event: KeyboardEvent, scope: Scope): boolean {\r\n        let individualCodes = keyCodes;\r\n        if (individualCodes.length !== this.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < this.keyCodes.length; ++x) {\r\n            if (!this.keyCodes[x].isPressed(individualCodes[x])) {\r\n                return false;\r\n            }\r\n        }\r\n        return this.call(keyCodes, event, scope);\r\n    }\r\n\r\n    // determines if this is a partial match on a sequence\r\n    public isPartial(keyCodes: number[][]): boolean {\r\n        let individualCodes = keyCodes;\r\n        if (individualCodes.length > this.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < individualCodes.length; ++x) {\r\n            if (!this.keyCodes[x].isPressed(individualCodes[x])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","import { Sequence } from './Sequence'\r\n\r\n// Defines the scope for a series of sequences\r\nexport class Scope {\r\n    // constructor\r\n    constructor(public name: string) {\r\n    }\r\n\r\n    // The sequences available in this scope\r\n    private sequences: Sequence[] = [];\r\n\r\n    // determines if anything in this scope was pressed\r\n    public press(keyCodes: number[][], event: KeyboardEvent): boolean {\r\n        this.sequences = this.sequences.sort((x, y) => x.length > y.length ? 1 : -1);\r\n        for (let x = 0; x < this.sequences.length; ++x) {\r\n            if (this.sequences[x].press(keyCodes, event, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // calls the default handler if one exists\r\n    public callDefault(keyCodes: number[][], event: KeyboardEvent): boolean {\r\n        let defaultItems = this.sequences.filter(x => x.isDefault);\r\n        if (defaultItems.length === 0) {\r\n            return false;\r\n        }\r\n        return defaultItems[0].call(keyCodes, event, this);\r\n    }\r\n\r\n    // determines if the sequence is a partial match\r\n    public isPartial(keyCodes: number[][]): boolean {\r\n        for (let x = 0; x < this.sequences.length; ++x) {\r\n            if (this.sequences[x].isPartial(keyCodes)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // adds an individual sequence to the scope\r\n    public addSequence(keyCodes: string, callback: (event: KeyboardEvent, handler: any) => void): Scope {\r\n        this.removeSequence(keyCodes);\r\n        this.sequences.push(new Sequence(keyCodes, callback));\r\n        return this;\r\n    }\r\n\r\n    // removes an individual sequence from the scope\r\n    public removeSequence(keyCodes: string): Scope {\r\n        this.sequences = this.sequences.filter(x => x.keyCodeSequence !== keyCodes.toUpperCase());\r\n        return this;\r\n    }\r\n\r\n    // clears the sequences and scopes from the scope\r\n    public clear(): Scope {\r\n        this.sequences = [];\r\n        return this;\r\n    }\r\n}","import { IHotkeys } from './Interfaces/IHotkeys'\r\nimport { StringDictionary } from '../Types/StringDictionary'\r\nimport { Globals } from './Globals'\r\nimport { Scope } from './Scope'\r\n\r\n// Defines the hotkeys system\r\nexport class Hotkeys implements IHotkeys {\r\n    // constructor\r\n    constructor() {\r\n        this.scopes = {};\r\n        this.scopes[\"Default\"] = new Scope(\"Default\");\r\n        this.currentScope = this.scopes[\"Default\"];\r\n        this.filter = x => {\r\n            let tagName = ((<Element>x.target) || (<Element>x.srcElement)).tagName;\r\n            return tagName !== \"INPUT\"\r\n                && tagName !== \"SELECT\"\r\n                && tagName !== \"TEXTAREA\";\r\n        };\r\n        this.latestKeys = [];\r\n    }\r\n    // The scopes within the system\r\n    private scopes: StringDictionary<Scope>;\r\n\r\n    // The current scope that the system uses\r\n    private currentScope: Scope;\r\n\r\n    // latesst key presses\r\n    private latestKeys: number[][];\r\n\r\n    // filter used by the system to determine if it should capture the keys pressed\r\n    private filter: (event: KeyboardEvent) => boolean;\r\n\r\n    // Sets the current scope, adding it if it doesn't exist and returns it.\r\n    public setScope(name: string): Scope {\r\n        let scope = this.addScope(name);\r\n        this.currentScope = scope;\r\n        return scope;\r\n    }\r\n\r\n    // Adds a scope to the system and returns it (or returns it if it already exists)\r\n    public addScope(name: string): Scope {\r\n        let tempScope = this.scopes[name];\r\n        if (tempScope !== undefined) {\r\n            return tempScope;\r\n        }\r\n        tempScope = new Scope(name);\r\n        this.scopes[name] = tempScope;\r\n        return tempScope;\r\n    }\r\n\r\n    // Removes a scope from the system\r\n    public removeScope(name: string): Hotkeys {\r\n        this.scopes[name] = undefined;\r\n        if (name === \"Default\") {\r\n            this.scopes[\"Default\"] = new Scope(\"Default\");\r\n        }\r\n        if (this.currentScope.name === name) {\r\n            this.currentScope = this.scopes[\"Default\"];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // clears all scopes and creates a new Default scope\r\n    public clear(): Hotkeys {\r\n        this.scopes = {};\r\n        this.scopes[\"Default\"] = new Scope(\"Default\");\r\n        this.currentScope = this.scopes[\"Default\"];\r\n        this.latestKeys = [];\r\n        return this;\r\n    }\r\n\r\n    // adds a sequence to the current scope\r\n    public bind(keyCodes: string, callback: (event: KeyboardEvent, handler: any) => void): IHotkeys {\r\n        this.currentScope.addSequence(keyCodes, callback);\r\n        return this;\r\n    }\r\n\r\n    // removes a sequence from the current scope\r\n    public unbind(keyCodes: string): Hotkeys {\r\n        this.currentScope.removeSequence(keyCodes);\r\n        return this;\r\n    }\r\n\r\n    // Called when a press event is fired\r\n    public press(event: KeyboardEvent): void {\r\n        if (!(this.filter(event))) {\r\n            return;\r\n        }\r\n        let currentKey = this.getKeys(event);\r\n        this.latestKeys.push(currentKey);\r\n        let tempArray = this.latestKeys.slice();\r\n        if (this.currentScope.press(this.latestKeys, event)) {\r\n            this.latestKeys = [];\r\n        } else {\r\n            while (this.latestKeys.length > 0) {\r\n                if (this.currentScope.isPartial(this.latestKeys)) {\r\n                    return;\r\n                }\r\n                this.latestKeys.shift();\r\n            }\r\n            if (this.latestKeys.length === 0) {\r\n                this.currentScope.callDefault(tempArray, event);\r\n            }\r\n        }\r\n    }\r\n\r\n    // gets the string version of the keys currently pressed\r\n    private getKeys(event: KeyboardEvent): number[] {\r\n        let returnValue = [];\r\n        if (event.altKey) {\r\n            returnValue.push(Globals.keyMappings[\"ALT\"]);\r\n        }\r\n        if (event.ctrlKey) {\r\n            returnValue.push(Globals.keyMappings[\"CTRL\"]);\r\n        }\r\n        if (event.metaKey) {\r\n            returnValue.push(Globals.keyMappings[\"META\"]);\r\n        }\r\n        if (event.shiftKey) {\r\n            returnValue.push(Globals.keyMappings[\"SHIFT\"]);\r\n        }\r\n        if (returnValue.indexOf(event.keyCode) === -1) {\r\n            returnValue.push(event.keyCode);\r\n        }\r\n        return returnValue;\r\n    }\r\n}","// Dictionary helper class\r\nexport class StringDictionary<VALUET> {\r\n    [key: string]: VALUET;\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\n\r\n//An individual path part\r\nexport class PathPart {\r\n    //Constructor\r\n    constructor(part: string, defaultValues: StringDictionary<any>) {\r\n        this.variable = part.charAt(0) === '{' && part.charAt(part.length - 1) === '}';\r\n        part = part.replace(/[{}]/g, '');\r\n        this.optional = part.charAt(0) === '^';\r\n        this.part = part.replace(/[\\^]/g, '');\r\n        if (defaultValues[this.part] !== undefined) {\r\n            this.defaultValue = defaultValues[this.part];\r\n        } else {\r\n            this.defaultValue = '';\r\n        }\r\n    }\r\n\r\n    //The actual part of the path to match on\r\n    private part: string;\r\n\r\n    //Is this a variable?\r\n    private variable: boolean;\r\n\r\n    //Is this optional?\r\n    private optional: boolean;\r\n\r\n    //The default value for this part\r\n    private defaultValue: any;\r\n\r\n    //Determines if this is a match.\r\n    public isMatch(part: string): boolean {\r\n        if (part === undefined || part === null) {\r\n            return this.optional;\r\n        }\r\n        part = part;\r\n        if (this.variable) {\r\n            return this.optional || part !== '';\r\n        }\r\n        return this.optional || part.toUpperCase() === this.part.toUpperCase();\r\n    }\r\n\r\n    //Gets the value, if it is a variable. If it is not a variable, it returns undefined and if it is a variable but no\r\n    //value is present it returns null.\r\n    private getValue(part: string): string {\r\n        if (!this.variable) {\r\n            return part || this.defaultValue;\r\n        }\r\n        if (part !== undefined) {\r\n            return part || this.defaultValue;\r\n        } else {\r\n            return this.defaultValue;\r\n        }\r\n    }\r\n\r\n    //Sets the value used for the path part\r\n    public setValue(part: string, parameters: StringDictionary<any>): void {\r\n        let tempValue = this.getValue(part);\r\n        parameters[this.part] = this.getValue(part);\r\n    }\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\n\r\n// An individual query string part\r\nexport class QueryPart {\r\n    // Constructor\r\n    constructor(part: string, defaultValues: StringDictionary<any>) {\r\n        let tempParts = part.split(\"=\", 2);\r\n        this.key = tempParts[0];\r\n        part = tempParts[1];\r\n        this.variable = part.charAt(0) === \"{\" && part.charAt(part.length - 1) === \"}\";\r\n        part = part.replace(/[{}]/g, \"\");\r\n        this.optional = part.charAt(0) === \"^\";\r\n        this.part = part.replace(/[\\^]/g, \"\");\r\n        if (defaultValues[this.part] !== undefined) {\r\n            this.defaultValue = defaultValues[this.part];\r\n        } else {\r\n            this.defaultValue = \"\";\r\n        }\r\n    }\r\n\r\n    // The actual part of the path to match on\r\n    private part: string;\r\n\r\n    // The key portion of the query string part\r\n    private key: string;\r\n\r\n    // Is this a variable?\r\n    private variable: boolean;\r\n\r\n    // Is this optional?\r\n    private optional: boolean;\r\n\r\n    // The default value for this part\r\n    private defaultValue: any;\r\n\r\n    // Determines if this is a match.\r\n    public isMatch(part: string): boolean {\r\n        if (part === undefined || part === null) {\r\n            return false;\r\n        }\r\n        let tempParts = part.split(\"=\", 2);\r\n        if (tempParts.length !== 2) {\r\n            return false;\r\n        }\r\n        if (this.key.toUpperCase() !== tempParts[0].toUpperCase()) {\r\n            return false;\r\n        }\r\n        part = tempParts[1];\r\n        if (part === undefined) {\r\n            return this.optional;\r\n        }\r\n        if (this.variable) {\r\n            return this.optional || part !== \"\";\r\n        }\r\n        return this.optional || part.toUpperCase() === this.part.toUpperCase();\r\n    }\r\n\r\n    // Gets the value, if it is a variable. If it is not a variable, it returns undefined and if it is a variable but no\r\n    // value is present it returns null.\r\n    private getValue(part: string): string {\r\n        if (part === undefined || part === null) {\r\n            return this.defaultValue;\r\n        }\r\n        let tempParts = part.split(\"=\", 2);\r\n        if (tempParts.length !== 2) {\r\n            return this.defaultValue;\r\n        }\r\n        part = tempParts[1];\r\n        if (!this.variable) {\r\n            return part || this.defaultValue;\r\n        }\r\n        if (part !== undefined) {\r\n            return part || this.defaultValue;\r\n        } else {\r\n            return this.defaultValue;\r\n        }\r\n    }\r\n\r\n    // Sets the value used for the path part\r\n    public setValue(part: string, parameters: StringDictionary<any>): void {\r\n        let tempValue = this.getValue(part);\r\n        parameters[this.key] = this.getValue(part);\r\n    }\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\n\r\n// An individual hash part\r\nexport class HashPart {\r\n    // Constructor\r\n    constructor(part: string, defaultValues: StringDictionary<any>) {\r\n        part = part.replace(/[#!]/g, \"\");\r\n        this.variable = part.charAt(0) === \"{\" && part.charAt(part.length - 1) === \"}\";\r\n        part = part.replace(/[{}]/g, \"\");\r\n        this.optional = part.charAt(0) === \"^\";\r\n        this.part = part.replace(/[\\^]/g, \"\");\r\n        if (defaultValues[this.part] !== undefined) {\r\n            this.defaultValue = defaultValues[this.part];\r\n        } else {\r\n            this.defaultValue = \"\";\r\n        }\r\n    }\r\n\r\n    // The actual part of the path to match on\r\n    private part: string;\r\n\r\n    // Is this a variable?\r\n    private variable: boolean;\r\n\r\n    // Is this optional?\r\n    private optional: boolean;\r\n\r\n    // The default value for this part\r\n    private defaultValue: any;\r\n\r\n    // Determines if this is a match.\r\n    public isMatch(part: string): boolean {\r\n        if (part === undefined || part === null) {\r\n            return this.optional;\r\n        }\r\n        part = part.replace(/[#!]/g, \"\");\r\n        if (this.variable) {\r\n            return this.optional || part !== \"\";\r\n        }\r\n        return this.optional || part.toUpperCase() === this.part.toUpperCase();\r\n    }\r\n\r\n    // Gets the value, if it is a variable. If it is not a variable, it returns undefined and if it is a variable but no\r\n    // value is present it returns null.\r\n    private getValue(part: string): string {\r\n        if (!this.variable) {\r\n            return part || this.defaultValue;\r\n        }\r\n        if (part !== undefined) {\r\n            return part || this.defaultValue;\r\n        } else {\r\n            return this.defaultValue;\r\n        }\r\n    }\r\n\r\n    // Sets the value used for the path part\r\n    public setValue(part: string, parameters: StringDictionary<any>): void {\r\n        part = part ? part : \"\";\r\n        part = part.replace(/[#!]/g, \"\");\r\n        parameters[this.part] = this.getValue(part);\r\n    }\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\nimport { PathPart } from './PathPart'\r\nimport { QueryPart } from './QueryPart'\r\nimport { HashPart } from './HashPart'\r\n\r\n// An individual route\r\nexport class Route {\r\n    // Constructor\r\n    constructor(url: string, callback: (parameters: StringDictionary<any>) => void, defaultValues?: StringDictionary<any>) {\r\n        if (defaultValues === undefined) {\r\n            defaultValues = new StringDictionary<any>();\r\n        }\r\n        this.url = this.fixUrl(url);\r\n        this.pathParts = this.getPathParts(this.url).map(x => new PathPart(x, defaultValues));\r\n        this.pathParts = this.pathParts ? this.pathParts : [];\r\n        this.queryParts = this.getQueryParts(this.url).map(x => new QueryPart(x, defaultValues));\r\n        this.queryParts = this.queryParts ? this.queryParts : [];\r\n        this.hashParts = this.getHashParts(this.url).map(x => new HashPart(x, defaultValues));\r\n        this.hashParts = this.hashParts ? this.hashParts : [];\r\n        this.callbacks = [callback];\r\n        this.defaultValues = defaultValues;\r\n    }\r\n\r\n    // URL path parts of the path\r\n    private pathParts: PathPart[];\r\n\r\n    // Query string parts of the path\r\n    private queryParts: QueryPart[];\r\n\r\n    private hashParts: HashPart[];\r\n\r\n    // Default values for this path\r\n    private defaultValues: StringDictionary<any>;\r\n\r\n    // URL that matches with the individual route\r\n    private url: string;\r\n\r\n    // Callback function to call\r\n    private callbacks: { (parameters: StringDictionary<any>): void }[];\r\n\r\n    // Determines if the url passed in equals the current route\r\n    public isRoute(url: string): boolean {\r\n        return this.url === this.fixUrl(url);\r\n    }\r\n\r\n    // adds a callback to the route\r\n    public addCallback(callback: (parameters: StringDictionary<any>) => void): void {\r\n        this.callbacks.push(callback);\r\n    }\r\n\r\n    // removes a callback from the route\r\n    public removeCallback(callback: (parameters: StringDictionary<any>) => void): void {\r\n        this.callbacks = this.callbacks.filter(x => x !== callback);\r\n    }\r\n\r\n    // Fixes a url that is passed in\r\n    private fixUrl(url: string): string {\r\n        if (!url.length) {\r\n            return url;\r\n        }\r\n        return url.replace(/^\\//, \"\").replace(/\\/+/g, \"/\").replace(/^\\/|\\/($|\\?)/, \"\").replace(/\\/\\#/g, \"#\");\r\n    }\r\n\r\n    // Get the path parts for the route\r\n    private getPathParts(url: string): string[] {\r\n        return url.split(\"?\", 2)[0].split(\"#\", 2)[0].split(\"/\");\r\n    }\r\n\r\n    // Gets the hash code portion of the url\r\n    private getHashParts(url: string): string[] {\r\n        let urlSplit = url.split(\"?\", 2)[0].split(\"#\", 2);\r\n        return (urlSplit.length < 2) ? [] : [urlSplit[1].replace(\"!\", \"\")];\r\n    }\r\n\r\n    // Gets the query string parts of the url\r\n    private getQueryParts(url: string): string[] {\r\n        let urlSplit = url.split(\"?\", 2);\r\n        if (urlSplit.length < 2) {\r\n            return [];\r\n        }\r\n        url = urlSplit[1];\r\n        return url ? url.split(\"&\") : [];\r\n    }\r\n\r\n    // Gets the parameters from the url specified\r\n    private getParametersFromUrl(pathParts: string[], queryParts: string[], hashParts: string[]): StringDictionary<any> {\r\n        let parameters = new StringDictionary<any>();\r\n        for (let x = 0; x < pathParts.length; ++x) {\r\n            this.pathParts[x].setValue(pathParts[x], parameters);\r\n        }\r\n        for (let x = 0; x < queryParts.length; ++x) {\r\n            this.queryParts[x].setValue(queryParts[x], parameters);\r\n        }\r\n        for (let x = 0; x < hashParts.length; ++x) {\r\n            this.hashParts[x].setValue(hashParts[x], parameters);\r\n        }\r\n        if (this.pathParts.length > pathParts.length) {\r\n            for (let x = pathParts.length; x < this.pathParts.length; ++x) {\r\n                this.pathParts[x].setValue(\"\", parameters);\r\n            }\r\n        }\r\n        if (this.queryParts.length > queryParts.length) {\r\n            for (let x = queryParts.length; x < this.queryParts.length; ++x) {\r\n                this.queryParts[x].setValue(\"\", parameters);\r\n            }\r\n        }\r\n        if (this.hashParts.length > hashParts.length) {\r\n            for (let x = hashParts.length; x < this.hashParts.length; ++x) {\r\n                this.hashParts[x].setValue(\"\", parameters);\r\n            }\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    // Determines if the route is a match\r\n    private isMatch(pathParts: string[], queryParts: string[], hashParts: string[]): boolean {\r\n        if (this.pathParts.length < pathParts.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < pathParts.length; ++x) {\r\n            if (!this.pathParts[x].isMatch(pathParts[x])) {\r\n                return false;\r\n            }\r\n        }\r\n        if (this.pathParts.length > pathParts.length) {\r\n            for (let x = pathParts.length; x < this.pathParts.length; ++x) {\r\n                if (!this.pathParts[x].isMatch(\"\")) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.queryParts.length < queryParts.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < queryParts.length; ++x) {\r\n            if (!this.queryParts[x].isMatch(queryParts[x])) {\r\n                return false;\r\n            }\r\n        }\r\n        if (this.queryParts.length > queryParts.length) {\r\n            for (let x = queryParts.length; x < this.queryParts.length; ++x) {\r\n                if (!this.queryParts[x].isMatch(\"\")) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.hashParts.length < hashParts.length) {\r\n            return false;\r\n        }\r\n        for (let x = 0; x < hashParts.length; ++x) {\r\n            if (!this.hashParts[x].isMatch(hashParts[x])) {\r\n                return false;\r\n            }\r\n        }\r\n        if (this.hashParts.length > hashParts.length) {\r\n            for (let x = hashParts.length; x < this.hashParts.length; ++x) {\r\n                if (!this.hashParts[x].isMatch(\"\")) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Calls the route's callback function\r\n    public run(url: string): boolean {\r\n        url = this.fixUrl(url);\r\n        let pathParts = this.getPathParts(url);\r\n        let queryParts = this.getQueryParts(url);\r\n        let hashParts = this.getHashParts(url);\r\n        if (!this.isMatch(pathParts, queryParts, hashParts)) {\r\n            return false;\r\n        }\r\n        let parameters = this.getParametersFromUrl(pathParts, queryParts, hashParts);\r\n        parameters[\"url\"] = url;\r\n        this.callbacks.forEach(x => x(parameters));\r\n        return true;\r\n    }\r\n}","import { StringDictionary } from '../Types/StringDictionary'\r\nimport { IRouter } from './Interfaces/IRouter'\r\nimport { Route } from './Route'\r\nimport { RouteData } from './DataTypes/RouteData'\r\n\r\n// Does basic path routing\r\nexport class Router implements IRouter {\r\n    // Constructor\r\n    constructor() {\r\n        this.routes = [];\r\n    }\r\n\r\n    // List of routes the system has currently\r\n    private routes: Route[];\r\n\r\n    // Maps a set of routes to the action specified\r\n    public map(route: RouteData[]): void {\r\n        for (let x = 0; x < route.length; ++x) {\r\n            this.addRoute(route[x].url, route[x].action, route[x].defaultValues);\r\n        }\r\n    }\r\n\r\n    // Adds a route to the router\r\n    public addRoute(url: string, callback: (parameters: StringDictionary<any>) => void, defaultValues?: StringDictionary<any>): Router {\r\n        let routes = this.routes.filter(x => x.isRoute(url));\r\n        if (routes.length === 0) {\r\n            this.routes.push(new Route(url, callback, defaultValues));\r\n        } else {\r\n            routes[0].addCallback(callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // Runs the url specified and returns true if it ran successfully, false otherwise.\r\n    public run(url: string): boolean {\r\n        for (let x = 0; x < this.routes.length; ++x) {\r\n            if (this.routes[x].run(url)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","// Wrapper for history object\r\nexport class PageHistory {\r\n    // Goes back by the value specified\r\n    public back(delta?: number): void {\r\n        if (delta === undefined) {\r\n            delta = 1;\r\n        }\r\n        window.history.go(-1 * delta);\r\n    }\r\n\r\n    // Goes forward by the value specified\r\n    public forward(delta?: number): void {\r\n        if (delta === undefined) {\r\n            delta = 1;\r\n        }\r\n        window.history.go(delta);\r\n    }\r\n\r\n    // pushes a new url/state onto the history\r\n    public push(state: any, url?: string, title?: string): void {\r\n        window.history.pushState(state, title, url);\r\n    }\r\n\r\n    // replaces the current url with a new url/state\r\n    public replace(state: any, url?: string, title?: string): void {\r\n        window.history.replaceState(state, title, url);\r\n    }\r\n\r\n    // gets the current state\r\n    get state(): any {\r\n        return window.history.state;\r\n    }\r\n\r\n    // Returns the number of items in storage\r\n    get length(): number {\r\n        return window.history.length;\r\n    }\r\n}","import { FormValidation } from \"./Validation/FormValidation\";\r\nimport { ErrorLogging } from \"./Logging/ErrorLogging\";\r\nimport { LocalStorage } from \"./WebStorage/LocalStorage\";\r\nimport { SessionStorage } from \"./WebStorage/SessionStorage\";\r\nimport { Request, StorageMode } from \"./AJAX/Request\";\r\nimport { DatabaseConnection } from \"./Database/Database\";\r\nimport { BrowserUtils } from \"./Browser/BrowserUtils\";\r\n\r\nimport { Hotkeys } from \"./Hotkey/Hotkeys\";\r\nimport { Router } from \"./Router/Router\";\r\nimport { PageHistory } from \"./History/PageHistory\";\r\nimport { Downloader } from \"./IO/Downloader\";\r\n\r\n// Starts up and generally manages the framework\r\nclass Framework {\r\n    // constructor\r\n    constructor() {\r\n        this.validation = new FormValidation();\r\n        this.errorLogger = new ErrorLogging();\r\n        this.localStorage = new LocalStorage();\r\n        this.sessionStorage = new SessionStorage();\r\n        this.hotkeys = new Hotkeys();\r\n        this.router = new Router();\r\n        this.history = new PageHistory();\r\n\r\n        window.addEventListener(\"keydown\", x => this.hotkeys.press(x));\r\n        window.addEventListener(\"load\", x => this.validation.initialize(), false);\r\n        window.onerror = (msg, url, ln, col, error) => {\r\n            this.errorLogger.onError(msg.toString(), url, ln, col, error);\r\n        };\r\n        this.errorLogger.setLoggingFunction((message: string, stack: string) => { console.log(message); });\r\n    }\r\n\r\n    // the hotkeys object\r\n    public hotkeys: Hotkeys;\r\n\r\n    // The router object\r\n    public router: Router;\r\n\r\n    // The form validation object\r\n    public validation: FormValidation;\r\n\r\n    // The error logging object\r\n    public errorLogger: ErrorLogging;\r\n\r\n    // The page history object\r\n    public history: PageHistory;\r\n\r\n    // The local storage object\r\n    public localStorage: LocalStorage;\r\n\r\n    // The session storage object\r\n    public sessionStorage: SessionStorage;\r\n}\r\n\r\nexport { Request, DatabaseConnection, Framework, StorageMode, BrowserUtils, Downloader };","let clickOutside: any = {\r\n    mounted: function (el: any, binding: any) {\r\n        clickOutside.onEventBound = clickOutside.onEvent.bind({ el });\r\n        document.addEventListener(\"click\", clickOutside.onEventBound);\r\n        if (typeof binding.value !== \"function\") {\r\n            throw new Error(\"Argument must be a function\");\r\n        }\r\n        clickOutside.cb = binding.value;\r\n    },\r\n    cb: function (event: any) {\r\n        return;\r\n    },\r\n    onEvent: function (event: { target: any; }) {\r\n        if (event.target === this.el || this.el.contains(event.target) || !clickOutside.cb) {\r\n            return;\r\n        }\r\n        clickOutside.cb(event);\r\n    },\r\n    onEventBound: function () {\r\n        return;\r\n    },\r\n    unbind: function () {\r\n        document.removeEventListener(\"click\", clickOutside.onEventBound);\r\n    },\r\n    update: function (el: any, binding: { value: (event: any) => void; }) {\r\n        if (typeof binding.value !== \"function\") {\r\n            throw new Error(\"Argument must be a function\");\r\n        }\r\n        clickOutside.cb = binding.value;\r\n    },\r\n};\r\n\r\nexport default clickOutside;","// Basic component schema\r\nexport default class ComponentSchema {\r\n    // Component type\r\n    public type: string;\r\n\r\n    // Children components\r\n    public children: ComponentSchema[];\r\n}","declare global {\r\n    interface String {\r\n        slugify(): string;\r\n        stripHTML(): string;\r\n        toNumber(): number;\r\n        replaceAll(): string;\r\n    }\r\n}\r\n\r\n// \"slugifies\" the string.\r\nString.prototype.slugify = function (): string {\r\n    return this.trim().replace(/ /g, \"-\").replace(/-{2,}/g, \"-\").replace(/^-+|-+$/g, \"\").replace(/([^a-zA-Z0-9-_/./:]+)/g, \"\");\r\n};\r\n\r\n// Strips out HTML\r\nString.prototype.stripHTML = function (): string {\r\n    let tempDiv = document.createElement(\"div\");\r\n    tempDiv.innerHTML = this;\r\n    return (tempDiv.textContent || tempDiv.innerText || \"\").replace(/^\\s+|\\s+$/g, \"\");\r\n};\r\n\r\n// Converts it to a number, stripping out non numeric values\r\nString.prototype.toNumber = function (): number {\r\n    if (this == null)\r\n        return 0;\r\n    return parseFloat(this.stripHTML().replace(/[^0-9.-]/g, \"\"));\r\n};\r\n\r\nexport { }","<template>\r\n    <div>\r\n        ASDF\r\n        <component\r\n            v-for=\"component in schema.children\"\r\n            :key=\"component.type\"\r\n            :is=\"component.type\"\r\n            :data=\"internalData\"\r\n            :schema=\"component\"\r\n            @save=\"saveData\"\r\n            @delete=\"deleteData\"\r\n            @load=\"fetchData\">\r\n        </component>\r\n        <pre>{{internalData}}</pre>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Request, StorageMode } from '../Framework/AJAX/Request';\r\nimport ComponentSchema from \"./DataTypes/ComponentSchema\";\r\nimport \"../Framework/Extensions/String\";\r\nimport Vue from 'vue';\r\n\r\nexport default Vue.defineComponent({\r\n    name: \"DataHandler\",\r\n    data: function() {\r\n        return {\r\n            count: 0,\r\n            timer: 0,\r\n            internalData: this.model\r\n        };\r\n    },\r\n    props: {\r\n        model: {\r\n            type: Object,\r\n            default: {}\r\n        },\r\n        schema: {\r\n            type: ComponentSchema,\r\n            default: new ComponentSchema()\r\n        }\r\n    },\r\n    methods: {\r\n        fetchData: function() {\r\n            if(!this.schema.loadUrl) {\r\n                return;\r\n            }\r\n            let that = this;\r\n            Request.post('/api/query', {\r\n                query: that.schema.datalistQuery\r\n            })\r\n            .onSuccess((data: any)=>{\r\n                that.schema.datalist = data.data.dropDown;\r\n            })\r\n            .setMode(StorageMode.StorageAndUpdate)\r\n            .send();\r\n        },\r\n        saveData: function() {\r\n            let that = this;\r\n        },\r\n        deleteData: function() {\r\n            let that = this;\r\n        }\r\n    },\r\n    created: function() {\r\n        if(!this.schema.datalistQuery) {\r\n            return;\r\n        }\r\n        let that = this;\r\n        that.fetchData();\r\n    },\r\n    watch: {\r\n        model: function(newModel, oldModel) {\r\n            if (oldModel === newModel) {\r\n                return;\r\n            }\r\n            this.internalModel = newModel;\r\n        },\r\n    }\r\n});\r\n\r\n</script>","<template>\r\n    <div>\r\n        ASDF\r\n        <component\r\n            v-for=\"component in schema.children\"\r\n            :key=\"component.type\"\r\n            :is=\"component.type\"\r\n            :data=\"internalData\"\r\n            :schema=\"component\"\r\n            @save=\"saveData\"\r\n            @delete=\"deleteData\"\r\n            @load=\"fetchData\">\r\n        </component>\r\n        <pre>{{internalData}}</pre>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { Request, StorageMode } from '../Framework/AJAX/Request';\r\nimport ComponentSchema from \"./DataTypes/ComponentSchema\";\r\nimport \"../Framework/Extensions/String\";\r\nimport Vue from 'vue';\r\n\r\nexport default Vue.defineComponent({\r\n    name: \"DataHandler\",\r\n    data: function() {\r\n        return {\r\n            count: 0,\r\n            timer: 0,\r\n            internalData: this.model\r\n        };\r\n    },\r\n    props: {\r\n        model: {\r\n            type: Object,\r\n            default: {}\r\n        },\r\n        schema: {\r\n            type: ComponentSchema,\r\n            default: new ComponentSchema()\r\n        }\r\n    },\r\n    methods: {\r\n        fetchData: function() {\r\n            if(!this.schema.loadUrl) {\r\n                return;\r\n            }\r\n            let that = this;\r\n            Request.post('/api/query', {\r\n                query: that.schema.datalistQuery\r\n            })\r\n            .onSuccess((data: any)=>{\r\n                that.schema.datalist = data.data.dropDown;\r\n            })\r\n            .setMode(StorageMode.StorageAndUpdate)\r\n            .send();\r\n        },\r\n        saveData: function() {\r\n            let that = this;\r\n        },\r\n        deleteData: function() {\r\n            let that = this;\r\n        }\r\n    },\r\n    created: function() {\r\n        if(!this.schema.datalistQuery) {\r\n            return;\r\n        }\r\n        let that = this;\r\n        that.fetchData();\r\n    },\r\n    watch: {\r\n        model: function(newModel, oldModel) {\r\n            if (oldModel === newModel) {\r\n                return;\r\n            }\r\n            this.internalModel = newModel;\r\n        },\r\n    }\r\n});\r\n\r\n</script>","<template>\r\n    <ul class=\"unstyled\"  v-click-outside=\"hideDropDownFunc\">\r\n        <li>\r\n            <a class=\"fas fa-circle-user\" href=\"#\" v-on:click.stop.prevent=\"showDropDownFunc\"></a>\r\n            <div v-bind:class=\"{ 'show': showDropDown, 'z-depth-2': showDropDown, 'hidden': !showDropDown }\">\r\n                <ul class=\"grouped\">\r\n                    <li v-for=\"item in items\" v-bind:key=\"item.display\">\r\n                        <a :href=\"item.url\" v-bind:class=\"[item.icon]\">{{ item.display }}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport clickOutside from './VueExtensions/Directives/clickOutside';\r\n\r\n\r\nexport default Vue.defineComponent({\r\n    data: function () {\r\n        return {\r\n            items: this.items,\r\n            showDropDown: false,\r\n        };\r\n    },\r\n    props: {\r\n        items: Array\r\n    },\r\n    methods: {\r\n        showDropDownFunc: function () {\r\n            this.showDropDown = true;\r\n        },\r\n        hideDropDownFunc: function () {\r\n            this.showDropDown = false;\r\n        },\r\n    },\r\n    directives: {\r\n        clickOutside\r\n    }\r\n});\r\n\r\n\r\n</script>","<template>\r\n    <ul class=\"unstyled\"  v-click-outside=\"hideDropDownFunc\">\r\n        <li>\r\n            <a class=\"fas fa-circle-user\" href=\"#\" v-on:click.stop.prevent=\"showDropDownFunc\"></a>\r\n            <div v-bind:class=\"{ 'show': showDropDown, 'z-depth-2': showDropDown, 'hidden': !showDropDown }\">\r\n                <ul class=\"grouped\">\r\n                    <li v-for=\"item in items\" v-bind:key=\"item.display\">\r\n                        <a :href=\"item.url\" v-bind:class=\"[item.icon]\">{{ item.display }}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </li>\r\n    </ul>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport Vue from 'vue'\r\nimport clickOutside from './VueExtensions/Directives/clickOutside';\r\n\r\n\r\nexport default Vue.defineComponent({\r\n    data: function () {\r\n        return {\r\n            items: this.items,\r\n            showDropDown: false,\r\n        };\r\n    },\r\n    props: {\r\n        items: Array\r\n    },\r\n    methods: {\r\n        showDropDownFunc: function () {\r\n            this.showDropDown = true;\r\n        },\r\n        hideDropDownFunc: function () {\r\n            this.showDropDown = false;\r\n        },\r\n    },\r\n    directives: {\r\n        clickOutside\r\n    }\r\n});\r\n\r\n\r\n</script>","// import Form from \"../Form.vue\";\r\n// import Tabs from \"../Tabs.vue\";\r\nimport DataHandler from \"../DataHandler.vue\";\r\nimport Vue from \"vue\";\r\nimport SideMenuVue from \"../SideMenu.vue\";\r\n\r\nexport default (app: Vue.App<Element>) => {\r\n    app.component('mithril-data-handler', DataHandler);\r\n    app.component('mithril-side-menu', SideMenuVue);\r\n};","import Vue from \"vue\";\r\nimport { RegisterDirectives } from \"./VueDirectives\";\r\nimport { RegisterFilters } from \"./VueFilters\";\r\nimport VueComponents from \"./VueComponents\";\r\n\r\nexport default {\r\n    install: (app: Vue.App<Element>, options: any) => {\r\n        RegisterFilters(app);\r\n        RegisterDirectives(app);\r\n        VueComponents(app);\r\n    }\r\n}","import Vue from 'vue';\r\nimport moment from 'moment';\r\n\r\nexport function RegisterFilters(app: Vue.App<Element>): Vue.App<Element> {\r\n    if (app == null) {\r\n        return app;\r\n    }\r\n    app.config.globalProperties.$filters = {\r\n        moment: function (date: Date, format: string, parsingFormat?: string) {\r\n            if (date == null) {\r\n                return \"N/A\";\r\n            }\r\n            parsingFormat ??= \"YYYY-MM-DDThh:mm:ss\";\r\n            format ??= \"M-D-YYYY h:mm A\";\r\n            return moment(date, parsingFormat).format(format);\r\n        },\r\n        capitalize: function (str: string) {\r\n            if (str == null) {\r\n                return \"\";\r\n            }\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        },\r\n        maxsize: function (value: string, size: number, substitutionString?: string) {\r\n            if (value == null) {\r\n                return \"\";\r\n            }\r\n            if (value.length <= size) {\r\n                return value;\r\n            }\r\n            substitutionString ??= \"...\";\r\n            return value.substring(0, size) + substitutionString;\r\n        },\r\n        currency: function (value: number, locales?: string, format?: Intl.NumberFormatOptions) {\r\n            if (value == null) {\r\n                return \"\";\r\n            }\r\n            locales ??= \"en-US\";\r\n            format ??= { style: 'currency', currency: 'USD' };\r\n            return Intl.NumberFormat(locales, format).format(value);\r\n        }\r\n    };\r\n    return app;\r\n}","import Vue from 'vue';\r\nimport clickOutside from './Directives/clickOutside';\r\n\r\nexport function RegisterDirectives(app: Vue.App<Element>): Vue.App<Element> {\r\n    app.directive(\"click-outside\", clickOutside);\r\n    return app;\r\n}","import { Framework, DatabaseConnection, Request, StorageMode, BrowserUtils, Downloader } from \"./Framework/Framework\";\r\nimport MithrilPlugin from \"./Component/VueExtensions/MithrilPlugin\";\r\n\r\nimport Vue from 'vue';\r\n\r\n// Starts up and generally manages the framework\r\nclass Mithril {\r\n    // constructor\r\n    constructor() {\r\n        this.framework = new Framework();\r\n        this.setupLogging();\r\n    }\r\n\r\n    // Sets up Vue components\r\n    public SetupComponents(app: Vue.App<Element>): Vue.App<Element> {\r\n        app.use(MithrilPlugin);\r\n        return app;\r\n    }\r\n\r\n    //Framework items\r\n    private framework: Framework;\r\n\r\n    // Set up error logging.\r\n    private setupLogging(): void {\r\n        var errorLogged = false;\r\n        this.framework.errorLogger.setLoggingFunction(function (ex: string, error: string) {\r\n            if (ex === null || errorLogged) {\r\n                return;\r\n            }\r\n            errorLogged = true;\r\n            var url = document.location;\r\n            var stack = error;\r\n            var out = ex;\r\n            out += \": at document path '\" + url + \"'.\";\r\n            if (stack !== null) {\r\n                out += \"\\n at \" + stack;\r\n            }\r\n            Request.post(\"API/Command/v1/Log\", { logLevel: \"Error\", message: out }).send();\r\n        });\r\n    }\r\n}\r\n\r\nexport { Request, DatabaseConnection, StorageMode, BrowserUtils, Mithril, Downloader };","﻿import { BrowserUtils, DatabaseConnection, Mithril, Request, StorageMode, Downloader } from \"../../../Mithril.Web.Common/build/ts/Mithril\";\r\n\r\nexport class ThemeStartup {\r\n    constructor() {\r\n        this.Core = new Mithril();\r\n    }\r\n\r\n    public Core: Mithril;\r\n}\r\n\r\nexport { Request, DatabaseConnection, StorageMode, BrowserUtils, Mithril, Downloader };"],"names":["HTMLElement","prototype","getParentByClass","className","element","this","parentElement","hasClass","indexOf","replaceClass","originalClassName","newClassName","tempClassName","replace","RegExp","trim","addClass","toggleClass","removeClass","show","hide","attribute","name","value","setAttribute","getAttribute","NodeList","map","callback","ReturnValues","x","length","concat","filter","FormValidation","constructor","errors","messageAttributes","initialize","inputElements","document","getElementsByTagName","willValidate","type","toUpperCase","addEventListener","y","inputHandler","target","invalidInputHandler","textAreaElements","textAreaHandler","invalidTextAreaHandler","selectElements","selectHandler","invalidSelectHandler","elements","initializeForm","form","input","validity","valid","errorMessages","getErrorMessages","setCustomValidity","join","textarea","select","getElementsByName","checkValidity","validate","result","validateInput","validateSelect","textareaElements","validateTextArea","validateForm","validateElement","tagName","tempResults","tempValue","key","message","generalMessage","validationMessage","Signature","params","toString","Function","trace","curr","push","signature","caller","getName","arguments","i","definition","split","exp","test","ErrorLogging","logError","ex","stack","setLoggingFunction","logger","onError","filename","lineno","colno","error","LocalStorage","set","localStorage","setItem","setObject","JSON","stringify","get","defaultValue","getItem","has","remove","removeItem","clear","index","getObject","parse","SessionStorage","sessionStorage","DatabaseConnection","dbName","tables","version","DBName","Version","request","indexedDB","open","onupgradeneeded","ev","database","table","objectStoreNames","contains","deleteObjectStore","createObjectStore","onsuccess","openDatabase","add","obj","transaction","objectStore","put","delete","getByKey","onSuccess","getKeys","getAllKeys","query","getAll","Request","method","url","data","headers","Headers","accept","parser","json","serializer","storageMode","StorageMode","NetworkOnly","databaseName","cacheKey","credentials","static","makeRequest","success","setHeader","setCacheKey","setCredentials","setParser","setMode","setSerializer","send","undefined","serializedData","StorageFirst","returnValueFromDB","queryNetwork","response","saveValueToDB","StorageAndUpdate","NetworkFirst","dataKey","Date","now","offlineCallback","onlineCallback","navigator","onLine","fetch","body","then","catch","event","FileTypes","exports","BrowserUtils","domain","window","location","protocol","host","isLocal","HashBang","hash","Id","pathname","substring","lastIndexOf","field","href","string","exec","title","Globals","keyMappings","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","PAUSE","CAPSLOCK","ESCAPE","SPACE","PAGEUP","PAGEDOWN","END","HOME","LEFT","UP","RIGHT","DOWN","INS","DEL","META","MINUS","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","NUMLOCK","SCROLLLOCK","Keypress","keys","keyCode","charCodeAt","isPressed","keysPressed","Sequence","keyCodes","keyCodeSequence","isDefault","call","scope","press","individualCodes","isPartial","Scope","sequences","sort","callDefault","defaultItems","addSequence","removeSequence","Hotkeys","scopes","currentScope","srcElement","latestKeys","setScope","addScope","tempScope","removeScope","bind","unbind","currentKey","tempArray","slice","shift","returnValue","altKey","ctrlKey","metaKey","shiftKey","StringDictionary","PathPart","part","defaultValues","variable","charAt","optional","isMatch","getValue","setValue","parameters","QueryPart","tempParts","HashPart","Route","fixUrl","pathParts","getPathParts","queryParts","getQueryParts","hashParts","getHashParts","callbacks","isRoute","addCallback","removeCallback","urlSplit","getParametersFromUrl","run","forEach","Router","routes","route","addRoute","action","PageHistory","back","delta","history","go","forward","state","pushState","replaceState","Framework","validation","errorLogger","hotkeys","router","onerror","msg","ln","col","console","log","clickOutside","mounted","el","binding","onEventBound","onEvent","Error","cb","removeEventListener","update","ComponentSchema","String","slugify","stripHTML","tempDiv","createElement","innerHTML","textContent","innerText","toNumber","parseFloat","script$1","Vue","defineComponent","count","timer","internalData","model","props","Object","default","schema","methods","fetchData","loadUrl","that","post","datalistQuery","datalist","dropDown","saveData","deleteData","created","watch","newModel","oldModel","internalModel","_createElementBlock","_openBlock","createElementBlock","_Fragment","_renderList","renderList","_ctx","children","component","_createBlock","createBlock","_resolveDynamicComponent","resolveDynamicComponent","onSave","onDelete","onLoad","_createElementVNode","createElementVNode","script","items","showDropDown","Array","showDropDownFunc","hideDropDownFunc","directives","_hoisted_1","class","_hoisted_2","_withDirectives","withDirectives","openBlock","onClick","args","_normalizeClass","Fragment","item","display","normalizeClass","icon","_toDisplayString","toDisplayString","_hoisted_3","MithrilPlugin","install","app","options","config","globalProperties","$filters","moment","date","format","parsingFormat","capitalize","str","maxsize","size","substitutionString","currency","locales","style","Intl","NumberFormat","RegisterFilters","directive","RegisterDirectives","DataHandler","SideMenuVue","VueComponents","Mithril","framework","setupLogging","SetupComponents","use","errorLogged","out","logLevel","columns","fileName","CSV","exportCSV","download","columnNames","splitter","z","columnName","actualName","column","property","header","_a","_b","row","replaceAll","msSaveBlob","Blob","encodeURIComponent","appendChild","click","removeChild","Core"],"mappings":"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"}